{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"SANDAG ATC Survey","text":"<p>Welcome to the SANDAG ATC Survey Data Model Website!</p>"},{"location":"api.html","title":"API","text":""},{"location":"api.html#data-model","title":"Data Model","text":"<p>This section contains the core structure of data model, which includes all the variables used in the ATC survey.</p> <p>Data Model for the SDIA Survey</p>"},{"location":"api.html#data_model.data_model.AirPassenger","title":"<code>AirPassenger</code>","text":"<p>               Bases: <code>Respondent</code></p> <p>Data model for an air passenger respondent. It includes attributes specific to air passengers.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class AirPassenger(Respondent):\n    \"\"\"\n    Data model for an air passenger respondent. It includes attributes specific to air passengers.\n    \"\"\"\n\n    resident_visitor_general: NoneOrNan[e.ResidentVisitorGeneral] = Field(\n        ...,\n        description=\"Whether a resident or a visitor of the San deigo airport service area\",\n    )\n    \"\"\"\n    Whether a resident or a visitor of the San deigo airport service area.\n    \"\"\"\n\n    resident_visitor_followup: NoneOrNanString[e.ResidentVisitorFollowup] = Field(\n        ...,\n        description=\"If neither a resident or a visitor, whether the respondent is visiting San Diego\",\n    )\n    \"\"\"\n    If neither a resident or a visitor, whether the respondent is visiting San Diego.\n    \"\"\"\n\n    resident_visitor_arriving: NoneOrNanString[bool] = Field(\n        ..., description = \"True if respondent lives outside San Diego Region and is going home by ground transportation\"\n    )\n\n    \"\"\"\n    True if respondent lives outside San Diego Region and is going home by ground transportation\n    \"\"\"\n\n    passenger_segment: NoneOrNan[e.PassengerSegment] = Field(\n        ..., description=\"Segment of the air passenger: (Resident/Visitor and Arriving/Departing)\"\n    )\n    \"\"\"\n    Segment of the air passenger: (Resident/Visitor and Arriving/Departing)\n    \"\"\"\n\n    qualified_visitor: NoneOrNan[bool] = Field( \n        ..., description = \"True if the respondent is a qualified visitor\")\n    \"\"\"\n    True if the respondent is a qualified visitor.\n    \"\"\"\n\n    is_sdia_home_airport: NoneOrNan[bool] = Field(\n        ..., description = \"True if the respondent's home airport is SDIA\"\n    )\n    \"\"\"\n    True if the respondent's home airport is SDIA\n    \"\"\"\n\n    country_of_residence: NoneOrNan[e.Country] = Field(\n        ...,\n        description=\"Country of residence for international vistors\",\n    )\n    \"\"\"\n    Country of residence for international vistors.\n    \"\"\"\n\n    state_of_residence: NoneOrNan[e.State] = Field(\n        ...,\n        description=\"State of residence for US and Mexico residents\",\n    )\n    \"\"\"\n    State of residence for US and Mexico residents.\n    \"\"\"\n\n    passenger_type: NoneOrNanString[e.PassengerType] = Field(\n        ..., description = \"Type of Passenger: Arriving, Departing or Connecting\"\n    )\n    \"\"\"\n    Type of Passenger: Arriving, Departing or Connecting\n    \"\"\"\n\n    previous_or_next_airport: NoneOrNanString[str] = Field(\n        ..., description = \"Where is the respondent flying from/flying to\"\n    )\n    \"\"\"\n    Where is the respondent flying from/flying to.\n    \"\"\"\n\n\n    # @model_validator(mode=\"before\")\n    # def validate_airport(cls, values):\n    #     # List of fields to validate\n    #     fields_to_check = ['previous_or_next_airport']\n\n    #     for field in fields_to_check:\n    #         value = values.get(field)\n    #         if not isinstance(value, str):\n    #             values[field] = str(value)\n    #             values['valid_record'] = False\n    #             values['validation_severity'] = \"Low\"\n    #             values['validation_error'] = f\"{field} is not string\"\n\n    #     return values\n\n    airline: NoneOrNanString[e.Airline] = Field(\n        ..., description = \"Airline of the respondent's flight\"\n    )\n    \"\"\"\n    Airline of the respondent's flight.\n    \"\"\"\n\n    airline_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other (not listed) airline of the respondent's flight\"\n    )\n    \"\"\"\n    Other (not listed) airline of the respondent's flight.\n    \"\"\"\n\n    flight_number: NoneOrNanString[Union[str, int]] = Field(\n        ..., description = \"Flight number of the respondent's flight\"\n    )\n    \"\"\"\n    Flight number of the respondent's flight.\n    \"\"\"\n\n    is_direct_flight: NoneOrNanString[bool] =  Field(\n        ..., description = \"True if the passenger did not use/is not using any connecting flights in their journey\"\n    )\n    \"\"\"\n    True if the passenger did not use/is not using any connecting flights in their journey\n    \"\"\"\n\n    @computed_field(\n        return_type = e.Terminal,\n        description = \"Airport Terminal for Air Passenger\",\n    )\n    @property\n    def airport_terminal(cls):\n        \"\"\"\n        Airport Terminal for Air Passenger\n        \"\"\"\n        if cls.interview_location == e.InterviewLocation.TERMINAL_1:\n            return e.Terminal.TERMINAL_1\n        if cls.interview_location == e.InterviewLocation.TERMINAL_2:\n            return e.Terminal.TERMINAL_2\n\n        #Deriving using Airline if location is not a terminal\n        if cls.airline in range(1,14):\n            return e.Terminal.TERMINAL_2\n        elif cls.airline in [14,15,16,17]:\n            return e.Terminal.TERMINAL_1\n        else:\n            return e.Terminal.UNKNOWN\n\n    flight_purpose: NoneOrNanString[e.FlightPurpose] = Field(\n        ..., description = \"Purpose of the respondent's flight\"\n    )\n    \"\"\"\n    Purpose of the respondent's flight.\n    \"\"\"\n\n    flight_purpose_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other (not listed) purpose of the respondent's flight\"\n    )\n    \"\"\"\n    Other (not listed) purpose of the respondent's flight\n    \"\"\"\n\n    resident_visitor_purpose: NoneOrNanString[e.ResidentVisitorPurpose] = Field(\n        ..., description = \"Determines the resident/visitor classification based on the home airport status and flight purpose\"\n    )\n    \"\"\"\n    Determines the resident/visitor classification based on the home airport status and flight purpose\n    \"\"\"\n\n\n    # @computed_field(\n    #     return_type = e.ResidentVisitorPurpose,\n    #     description = \"Determines the resident/visitor classification based on the home airport status and flight purpose\",\n    # )\n    # @property\n    # def resident_visitor_purpose(cls):\n    #     \"\"\"\n    #     Determines the resident/visitor classification based on the home airport status and flight purpose.\n    #     \"\"\"\n    #     if cls.is_sdia_home_airport == True and cls.flight_purpose in {e.FlightPurpose.BUSINESS_WORK, e.FlightPurpose.COMBINATION_BUSINESS_LEISURE}:\n    #         return e.ResidentVisitorPurpose.RESIDENT_BUSINESS\n    #     elif cls.is_sdia_home_airport == False:\n    #         return e.ResidentVisitorPurpose.RESIDENT_NON_BUSINESS\n    #     elif cls.flight_purpose in {e.FlightPurpose.BUSINESS_WORK, e.FlightPurpose.COMBINATION_BUSINESS_LEISURE}:\n    #         return e.ResidentVisitorPurpose.VISITOR_BUSINESS\n    #     else:\n    #         return e.ResidentVisitorPurpose.VISITOR_NON_BUSINESS\n\n\n    checked_bags: NoneOrNan[e.CheckedBags] = Field(\n        ..., description = \"Number of checked bags\"\n    )\n    \"\"\"\n    Number of checked bags.\n    \"\"\"\n\n    carryon_bags: NoneOrNan[e.CarryOns] = Field(\n        ..., description = \"Number of carry-on bags\"\n    )\n    \"\"\"\n    Number of carry-on bags.\n    \"\"\"\n\n    number_of_nights: NoneOrNan[e.TravelDuration] = Field(\n        ..., description = \"Number of nights the respondent will be visiting/away\"\n    )\n    \"\"\"\n    Number of nights the respondent will be visiting/away\n    \"\"\"\n\n\n    party_size_flight: NoneOrNanString[e.PartySize] = Field(\n        ..., description = \"Number of people flying with the respondent (count excludes the respondent)\"\n    )\n    \"\"\"\n    Number of people flying with the respondent (count excludes the respondent)\n    \"\"\"\n\n    party_size_ground_access_same: NoneOrNanString[bool] = Field(\n        ..., description = \"Whether flying party all traveled to airport together\"\n    )\n    \"\"\"\n    Whether flying party all traveled to airport together\n    \"\"\"\n\n    party_size_ground_access: NoneOrNanString[e.PartySize] = Field(\n        ..., description = \"Size of ground access travel party (count excludes the respondent)\"\n    )\n    \"\"\"\n    Size of ground access travel party (count excludes the respondent)\n    \"\"\"\n\n    party_includes_child_aged00to05: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the traveling party includes a child aged zero to two\"\n    )\n    \"\"\"\n    True if the traveling party includes a child aged zero to two.\n    \"\"\"\n\n    party_includes_child_aged06to17: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the traveling party includes a child aged three to nine\"\n    )\n    \"\"\"\n    True if the traveling party includes a child aged three to nine.\n    \"\"\"\n\n    party_includes_coworker: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the traveling party includes a coworker\"\n    )\n    \"\"\"\n    True if the traveling party includes a coworker.\n    \"\"\"\n\n    party_includes_friend_relative:  NoneOrNanString[bool] = Field(\n        ..., description = \"True if the traveling party includes a friend or relative\"\n    )\n    \"\"\"\n    True if the traveling party includes a friend or relative.\n    \"\"\"\n\n    party_includes_mobility_impaired:  NoneOrNanString[bool] = Field(\n        ..., description = \"True if the traveling party includes a mobility impaired person\"\n    )\n    \"\"\"\n    True if the traveling party includes a mobility impaired person\n    \"\"\"\n\n    party_composition_list: NoneOrNanString[str] = Field(\n        ..., description = \"List of people in the traveling party\"\n    )\n    \"\"\"\n    List of people in the traveling party\n    \"\"\"\n\n#Add here\n    sdia_flight_frequency: NoneOrNan[e.SanFlightFrequency] = Field(\n        ..., description = \"Respondent's number of flights from SDIA in the past 12 months\"\n    )\n    \"\"\"\n    Respondent's number of flights from SDIA in the past 12 months.\n    \"\"\"\n\n    access_mode_frequency: NoneOrNan[e.SanFlightFrequency] = Field(\n        ..., description = \"Number of times respondent used revealed access modes for other SDIA airport access trips in the past 12 months\"\n    )\n    \"\"\"\n    Number of times respondent used revealed access modes for other SDIA airport access trips in the past 12 months.\n    \"\"\"\n\n#Distribution of all modes:\n    sdia_accessmode_split_taxi: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used taxi as a mode for his trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used taxi as a mode for his trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_uber_lyft: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used Uber or Lyft as a mode for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used Uber or Lyft as a mode for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_car_black: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a black car or luxury service for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a black car or luxury service for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_dropped_off_by_family_friend: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent was dropped off by a family member or friend for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent was dropped off by a family member or friend for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_drove_alone_and_parked: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent drove alone and parked at SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent drove alone and parked at SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_drove_with_others_and_parked: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent drove with others and parked at SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent drove with others and parked at SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_rode_with_other_travelers_and_parked: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent rode with other travelers and parked at SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent rode with other travelers and parked at SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_mts992: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used MTS992 for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used MTS992 for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_flyer_shuttle: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used the Flyer Shuttle for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used the Flyer Shuttle for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_other_public_transit: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used another form of public transit for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used another form of public transit for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_rental_car_dropped_off: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a rental car and was dropped off at SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a rental car and was dropped off at SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_rental_car_parked: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent parked a rental car at SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent parked a rental car at SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_chartered_tour_bus: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a chartered tour bus for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a chartered tour bus for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_hotel_shuttle_van: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a hotel shuttle van for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a hotel shuttle van for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_employee_shuttle: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used an employee shuttle for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used an employee shuttle for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_other_shared_van: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used another type of shared van service for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used another type of shared van service for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_walk: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent walked to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent walked to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_wheelchair: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a wheelchair for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a wheelchair for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_bicycle_electric_bikeshare: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used an electric bikeshare for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used an electric bikeshare for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_bicycle_non_electric_bikeshare: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a non-electric bikeshare for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a non-electric bikeshare for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_bicycle_personal_electric_bicycle: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a personal electric bicycle for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a personal electric bicycle for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_bicycle_personal_non_electric_bicycle: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a personal non-electric bicycle for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a personal non-electric bicycle for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_e_scooter_shared: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a shared electric scooter for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a shared electric scooter for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_e_scooter_personal: NoneOrNanString[bool] = Field(\n        ..., description  = \"True if the respondent used a personal electric scooter for their trip to SDIA in the last 12 months\")\n    \"\"\"\n    True if the respondent used a personal electric scooter for their trip to SDIA in the last 12 months\n    \"\"\"\n\n    sdia_accessmode_split_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other mode the respondent used for their trip to SDIA in the last 12 months\"\n    )\n    \"\"\"\n    Other mode the respondent used for their trip to SDIA in the last 12 months.\n    \"\"\"\n\n    sdia_accessmode_split_list: NoneOrNanString[str] = Field(\n        ..., description = \"List of modes used by the respondent for their trip to SDIA in the last 12 months\"\n    )\n    \"\"\"\n    List of modes used by the respondent for their trip to SDIA in the last 12 months.\n    \"\"\"\n\n    sdia_accessmode_decision: NoneOrNan[e.ModeDecision] = Field(\n        ..., description = \"Factor which affects mode choice, for respondents who do not always used the same mode\"\n    )\n    \"\"\"\n    Factor which affects mode choice, for respondents who do not always used the same mode.\n    \"\"\"\n\n    sdia_transit_awareness: NoneOrNanString[e.YesNoType] = Field(\n        ..., description = \"Whether respondent is aware that buses are serving SDIA\"\n    )\n    \"\"\"\n    Whether respondent is aware that buses are serving SDIA\n    \"\"\"\n#Reasons to not use transit\n    reasons_no_transit_not_convenient: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it is not convenient\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it is not convenient.\n    \"\"\"\n\n    reasons_no_transit_too_complicated: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it too complicated\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it is too complicated.\n    \"\"\" \n\n    reasons_no_transit_dont_know_how: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because they don't know how\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because they don't know how.\n    \"\"\"\n\n    reasons_no_transit_no_good_options: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because there are no good options\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because there are no good options\n    \"\"\"\n\n    reasons_no_transit_not_flexible: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it is not flexible\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it is not flexible.\n    \"\"\"\n\n    reasons_no_transit_not_reliable: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it is not reliable\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it is not reliable.\n    \"\"\"\n\n    reasons_no_transit_not_safe: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it is not safe\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it is not safe.\n    \"\"\"\n\n    reasons_no_transit_ride_too_long: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it takes too long\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it takes too long\n    \"\"\"\n\n    reasons_no_transit_wait_too_long: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because the wait time is too long\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because the wait time is too long\n    \"\"\"\n\n    reasons_no_transit_does_not_run_when_needed: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because of it's schedule\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because of it's schedule\n    \"\"\"\n\n    reasons_no_transit_too_many_transfers: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it requries too many transfers\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it requires too many transfers\n    \"\"\"\n\n    reasons_no_transit_stop_too_far: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because the stop is too far\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because the stop is too far\n    \"\"\"\n\n    reasons_no_transit_not_economical: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it is not economical\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it is not economical\n    \"\"\"\n\n    reasons_no_transit_dislike_crowded_trains_buses: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because they don't like crowded trains and buses\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because they don't like crowded trains and buses.\n    \"\"\"\n\n    reasons_no_transit_too_much_walking_stairs: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because it involves too much walking and/or stairs\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because it too much walking and/or stairs\n    \"\"\"\n\n    reasons_no_transit_dislike_public_transport: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because they don't like public transport\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because they don't like public transport\n    \"\"\"\n\n    reasons_no_transit_dislike_public_transport_with_luggage: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because they don't like public transport with luggage\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because they don't like public transport with luggage\n    \"\"\"\n\n    reasons_no_transit_prefer_other_mode: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the respondent did not use transit because they prefer other modes(s)\"\n    )\n    \"\"\"\n    True if the respondent did not use transit because they prefer other mode(s)\n    \"\"\"\n\n    reasons_no_transit_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other reason why the respondent did not use transit\"\n    )\n    \"\"\"\n    Other reason why the respondent did not use transit.\n    \"\"\" \n\n    reasons_no_transit_list: NoneOrNanString[str] = Field(\n        ..., description = \"List of reasons why the respondent did not use transit\"\n    )\n    \"\"\"\n    List of reasons why the respondent did not use transit.\n    \"\"\"\n\n    non_sdia_flight_frequency: NoneOrNan[e.OtherFlightAndTransitUseFrequency] = Field(\n        ..., description = \"Respondent's number of flights from airport other than SDIA in the past 12 months\"\n    )\n    \"\"\"\n    Respondent's number of flights from airport other than SDIA in the past 12 months.\n    \"\"\"\n\n    other_airport_accessmode: NoneOrNanString[e.TravelMode] =  Field(\n        ..., description = \"Travel mode used to access other airports\"\n    )\n    \"\"\"\n    Travel mode used to access other airports\n    \"\"\"\n\n    other_airport_accessmode_grouped: NoneOrNanString[e.TravelModeGrouped] =  Field(\n        ..., description = \"Grouped Travel mode used to access other airports\"\n    )\n    \"\"\"\n    Grouped Travel mode used to access other airports\n    \"\"\"\n\n    airport_access_transit_use_elsewhere: NoneOrNanString[e.OtherFlightAndTransitUseFrequency] = Field(\n        ..., description = \"Frequency of Transit use by respondent to access other airports\"\n    )\n    \"\"\"\n    Frequency of Transit use by respondent to access other airports.\n    \"\"\"\n\n    airportaccesstransitname: NoneOrNanString[str] = Field(\n        ..., description = \"Name of other airport accessed by transit\"\n    )\n    \"\"\"\n    Name of other airport accessed by transit.\n    \"\"\"\n\n    pass \n</code></pre>"},{"location":"api.html#data_model.data_model.AirPassenger.access_mode_frequency","title":"<code>access_mode_frequency = Field(..., description='Number of times respondent used revealed access modes for other SDIA airport access trips in the past 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of times respondent used revealed access modes for other SDIA airport access trips in the past 12 months.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.airline","title":"<code>airline = Field(..., description=\"Airline of the respondent's flight\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Airline of the respondent\u2019s flight.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.airline_other","title":"<code>airline_other = Field(..., description=\"Other (not listed) airline of the respondent's flight\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other (not listed) airline of the respondent\u2019s flight.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.airport_access_transit_use_elsewhere","title":"<code>airport_access_transit_use_elsewhere = Field(..., description='Frequency of Transit use by respondent to access other airports')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Frequency of Transit use by respondent to access other airports.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.airport_terminal","title":"<code>airport_terminal</code>  <code>property</code>","text":"<p>Airport Terminal for Air Passenger</p>"},{"location":"api.html#data_model.data_model.AirPassenger.airportaccesstransitname","title":"<code>airportaccesstransitname = Field(..., description='Name of other airport accessed by transit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of other airport accessed by transit.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.carryon_bags","title":"<code>carryon_bags = Field(..., description='Number of carry-on bags')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of carry-on bags.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.checked_bags","title":"<code>checked_bags = Field(..., description='Number of checked bags')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of checked bags.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.country_of_residence","title":"<code>country_of_residence = Field(..., description='Country of residence for international vistors')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Country of residence for international vistors.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.flight_number","title":"<code>flight_number = Field(..., description=\"Flight number of the respondent's flight\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Flight number of the respondent\u2019s flight.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.flight_purpose","title":"<code>flight_purpose = Field(..., description=\"Purpose of the respondent's flight\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Purpose of the respondent\u2019s flight.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.flight_purpose_other","title":"<code>flight_purpose_other = Field(..., description=\"Other (not listed) purpose of the respondent's flight\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other (not listed) purpose of the respondent\u2019s flight</p>"},{"location":"api.html#data_model.data_model.AirPassenger.is_direct_flight","title":"<code>is_direct_flight = Field(..., description='True if the passenger did not use/is not using any connecting flights in their journey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the passenger did not use/is not using any connecting flights in their journey</p>"},{"location":"api.html#data_model.data_model.AirPassenger.is_sdia_home_airport","title":"<code>is_sdia_home_airport = Field(..., description=\"True if the respondent's home airport is SDIA\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent\u2019s home airport is SDIA</p>"},{"location":"api.html#data_model.data_model.AirPassenger.non_sdia_flight_frequency","title":"<code>non_sdia_flight_frequency = Field(..., description=\"Respondent's number of flights from airport other than SDIA in the past 12 months\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Respondent\u2019s number of flights from airport other than SDIA in the past 12 months.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.number_of_nights","title":"<code>number_of_nights = Field(..., description='Number of nights the respondent will be visiting/away')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of nights the respondent will be visiting/away</p>"},{"location":"api.html#data_model.data_model.AirPassenger.other_airport_accessmode","title":"<code>other_airport_accessmode = Field(..., description='Travel mode used to access other airports')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Travel mode used to access other airports</p>"},{"location":"api.html#data_model.data_model.AirPassenger.other_airport_accessmode_grouped","title":"<code>other_airport_accessmode_grouped = Field(..., description='Grouped Travel mode used to access other airports')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped Travel mode used to access other airports</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_composition_list","title":"<code>party_composition_list = Field(..., description='List of people in the traveling party')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of people in the traveling party</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_includes_child_aged00to05","title":"<code>party_includes_child_aged00to05 = Field(..., description='True if the traveling party includes a child aged zero to two')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the traveling party includes a child aged zero to two.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_includes_child_aged06to17","title":"<code>party_includes_child_aged06to17 = Field(..., description='True if the traveling party includes a child aged three to nine')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the traveling party includes a child aged three to nine.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_includes_coworker","title":"<code>party_includes_coworker = Field(..., description='True if the traveling party includes a coworker')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the traveling party includes a coworker.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_includes_friend_relative","title":"<code>party_includes_friend_relative = Field(..., description='True if the traveling party includes a friend or relative')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the traveling party includes a friend or relative.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_includes_mobility_impaired","title":"<code>party_includes_mobility_impaired = Field(..., description='True if the traveling party includes a mobility impaired person')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the traveling party includes a mobility impaired person</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_size_flight","title":"<code>party_size_flight = Field(..., description='Number of people flying with the respondent (count excludes the respondent)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of people flying with the respondent (count excludes the respondent)</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_size_ground_access","title":"<code>party_size_ground_access = Field(..., description='Size of ground access travel party (count excludes the respondent)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Size of ground access travel party (count excludes the respondent)</p>"},{"location":"api.html#data_model.data_model.AirPassenger.party_size_ground_access_same","title":"<code>party_size_ground_access_same = Field(..., description='Whether flying party all traveled to airport together')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether flying party all traveled to airport together</p>"},{"location":"api.html#data_model.data_model.AirPassenger.passenger_segment","title":"<code>passenger_segment = Field(..., description='Segment of the air passenger: (Resident/Visitor and Arriving/Departing)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Segment of the air passenger: (Resident/Visitor and Arriving/Departing)</p>"},{"location":"api.html#data_model.data_model.AirPassenger.passenger_type","title":"<code>passenger_type = Field(..., description='Type of Passenger: Arriving, Departing or Connecting')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of Passenger: Arriving, Departing or Connecting</p>"},{"location":"api.html#data_model.data_model.AirPassenger.previous_or_next_airport","title":"<code>previous_or_next_airport = Field(..., description='Where is the respondent flying from/flying to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Where is the respondent flying from/flying to.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.qualified_visitor","title":"<code>qualified_visitor = Field(..., description='True if the respondent is a qualified visitor')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent is a qualified visitor.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_dislike_crowded_trains_buses","title":"<code>reasons_no_transit_dislike_crowded_trains_buses = Field(..., description=\"True if the respondent did not use transit because they don't like crowded trains and buses\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because they don\u2019t like crowded trains and buses.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_dislike_public_transport","title":"<code>reasons_no_transit_dislike_public_transport = Field(..., description=\"True if the respondent did not use transit because they don't like public transport\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because they don\u2019t like public transport</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_dislike_public_transport_with_luggage","title":"<code>reasons_no_transit_dislike_public_transport_with_luggage = Field(..., description=\"True if the respondent did not use transit because they don't like public transport with luggage\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because they don\u2019t like public transport with luggage</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_does_not_run_when_needed","title":"<code>reasons_no_transit_does_not_run_when_needed = Field(..., description=\"True if the respondent did not use transit because of it's schedule\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because of it\u2019s schedule</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_dont_know_how","title":"<code>reasons_no_transit_dont_know_how = Field(..., description=\"True if the respondent did not use transit because they don't know how\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because they don\u2019t know how.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_list","title":"<code>reasons_no_transit_list = Field(..., description='List of reasons why the respondent did not use transit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of reasons why the respondent did not use transit.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_no_good_options","title":"<code>reasons_no_transit_no_good_options = Field(..., description='True if the respondent did not use transit because there are no good options')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because there are no good options</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_not_convenient","title":"<code>reasons_no_transit_not_convenient = Field(..., description='True if the respondent did not use transit because it is not convenient')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it is not convenient.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_not_economical","title":"<code>reasons_no_transit_not_economical = Field(..., description='True if the respondent did not use transit because it is not economical')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it is not economical</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_not_flexible","title":"<code>reasons_no_transit_not_flexible = Field(..., description='True if the respondent did not use transit because it is not flexible')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it is not flexible.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_not_reliable","title":"<code>reasons_no_transit_not_reliable = Field(..., description='True if the respondent did not use transit because it is not reliable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it is not reliable.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_not_safe","title":"<code>reasons_no_transit_not_safe = Field(..., description='True if the respondent did not use transit because it is not safe')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it is not safe.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_other","title":"<code>reasons_no_transit_other = Field(..., description='Other reason why the respondent did not use transit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other reason why the respondent did not use transit.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_prefer_other_mode","title":"<code>reasons_no_transit_prefer_other_mode = Field(..., description='True if the respondent did not use transit because they prefer other modes(s)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because they prefer other mode(s)</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_ride_too_long","title":"<code>reasons_no_transit_ride_too_long = Field(..., description='True if the respondent did not use transit because it takes too long')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it takes too long</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_stop_too_far","title":"<code>reasons_no_transit_stop_too_far = Field(..., description='True if the respondent did not use transit because the stop is too far')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because the stop is too far</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_too_complicated","title":"<code>reasons_no_transit_too_complicated = Field(..., description='True if the respondent did not use transit because it too complicated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it is too complicated.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_too_many_transfers","title":"<code>reasons_no_transit_too_many_transfers = Field(..., description='True if the respondent did not use transit because it requries too many transfers')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it requires too many transfers</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_too_much_walking_stairs","title":"<code>reasons_no_transit_too_much_walking_stairs = Field(..., description='True if the respondent did not use transit because it involves too much walking and/or stairs')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because it too much walking and/or stairs</p>"},{"location":"api.html#data_model.data_model.AirPassenger.reasons_no_transit_wait_too_long","title":"<code>reasons_no_transit_wait_too_long = Field(..., description='True if the respondent did not use transit because the wait time is too long')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not use transit because the wait time is too long</p>"},{"location":"api.html#data_model.data_model.AirPassenger.resident_visitor_arriving","title":"<code>resident_visitor_arriving = Field(..., description='True if respondent lives outside San Diego Region and is going home by ground transportation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if respondent lives outside San Diego Region and is going home by ground transportation</p>"},{"location":"api.html#data_model.data_model.AirPassenger.resident_visitor_followup","title":"<code>resident_visitor_followup = Field(..., description='If neither a resident or a visitor, whether the respondent is visiting San Diego')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If neither a resident or a visitor, whether the respondent is visiting San Diego.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.resident_visitor_general","title":"<code>resident_visitor_general = Field(..., description='Whether a resident or a visitor of the San deigo airport service area')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether a resident or a visitor of the San deigo airport service area.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.resident_visitor_purpose","title":"<code>resident_visitor_purpose = Field(..., description='Determines the resident/visitor classification based on the home airport status and flight purpose')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Determines the resident/visitor classification based on the home airport status and flight purpose</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_decision","title":"<code>sdia_accessmode_decision = Field(..., description='Factor which affects mode choice, for respondents who do not always used the same mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Factor which affects mode choice, for respondents who do not always used the same mode.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_bicycle_electric_bikeshare","title":"<code>sdia_accessmode_split_bicycle_electric_bikeshare = Field(..., description='True if the respondent used an electric bikeshare for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used an electric bikeshare for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_bicycle_non_electric_bikeshare","title":"<code>sdia_accessmode_split_bicycle_non_electric_bikeshare = Field(..., description='True if the respondent used a non-electric bikeshare for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a non-electric bikeshare for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_bicycle_personal_electric_bicycle","title":"<code>sdia_accessmode_split_bicycle_personal_electric_bicycle = Field(..., description='True if the respondent used a personal electric bicycle for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a personal electric bicycle for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_bicycle_personal_non_electric_bicycle","title":"<code>sdia_accessmode_split_bicycle_personal_non_electric_bicycle = Field(..., description='True if the respondent used a personal non-electric bicycle for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a personal non-electric bicycle for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_car_black","title":"<code>sdia_accessmode_split_car_black = Field(..., description='True if the respondent used a black car or luxury service for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a black car or luxury service for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_chartered_tour_bus","title":"<code>sdia_accessmode_split_chartered_tour_bus = Field(..., description='True if the respondent used a chartered tour bus for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a chartered tour bus for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_dropped_off_by_family_friend","title":"<code>sdia_accessmode_split_dropped_off_by_family_friend = Field(..., description='True if the respondent was dropped off by a family member or friend for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent was dropped off by a family member or friend for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_drove_alone_and_parked","title":"<code>sdia_accessmode_split_drove_alone_and_parked = Field(..., description='True if the respondent drove alone and parked at SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent drove alone and parked at SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_drove_with_others_and_parked","title":"<code>sdia_accessmode_split_drove_with_others_and_parked = Field(..., description='True if the respondent drove with others and parked at SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent drove with others and parked at SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_e_scooter_personal","title":"<code>sdia_accessmode_split_e_scooter_personal = Field(..., description='True if the respondent used a personal electric scooter for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a personal electric scooter for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_e_scooter_shared","title":"<code>sdia_accessmode_split_e_scooter_shared = Field(..., description='True if the respondent used a shared electric scooter for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a shared electric scooter for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_employee_shuttle","title":"<code>sdia_accessmode_split_employee_shuttle = Field(..., description='True if the respondent used an employee shuttle for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used an employee shuttle for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_flyer_shuttle","title":"<code>sdia_accessmode_split_flyer_shuttle = Field(..., description='True if the respondent used the Flyer Shuttle for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used the Flyer Shuttle for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_hotel_shuttle_van","title":"<code>sdia_accessmode_split_hotel_shuttle_van = Field(..., description='True if the respondent used a hotel shuttle van for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a hotel shuttle van for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_list","title":"<code>sdia_accessmode_split_list = Field(..., description='List of modes used by the respondent for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of modes used by the respondent for their trip to SDIA in the last 12 months.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_mts992","title":"<code>sdia_accessmode_split_mts992 = Field(..., description='True if the respondent used MTS992 for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used MTS992 for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_other","title":"<code>sdia_accessmode_split_other = Field(..., description='Other mode the respondent used for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other mode the respondent used for their trip to SDIA in the last 12 months.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_other_public_transit","title":"<code>sdia_accessmode_split_other_public_transit = Field(..., description='True if the respondent used another form of public transit for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used another form of public transit for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_other_shared_van","title":"<code>sdia_accessmode_split_other_shared_van = Field(..., description='True if the respondent used another type of shared van service for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used another type of shared van service for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_rental_car_dropped_off","title":"<code>sdia_accessmode_split_rental_car_dropped_off = Field(..., description='True if the respondent used a rental car and was dropped off at SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a rental car and was dropped off at SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_rental_car_parked","title":"<code>sdia_accessmode_split_rental_car_parked = Field(..., description='True if the respondent parked a rental car at SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent parked a rental car at SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_rode_with_other_travelers_and_parked","title":"<code>sdia_accessmode_split_rode_with_other_travelers_and_parked = Field(..., description='True if the respondent rode with other travelers and parked at SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent rode with other travelers and parked at SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_taxi","title":"<code>sdia_accessmode_split_taxi = Field(..., description='True if the respondent used taxi as a mode for his trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used taxi as a mode for his trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_uber_lyft","title":"<code>sdia_accessmode_split_uber_lyft = Field(..., description='True if the respondent used Uber or Lyft as a mode for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used Uber or Lyft as a mode for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_walk","title":"<code>sdia_accessmode_split_walk = Field(..., description='True if the respondent walked to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent walked to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_accessmode_split_wheelchair","title":"<code>sdia_accessmode_split_wheelchair = Field(..., description='True if the respondent used a wheelchair for their trip to SDIA in the last 12 months')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent used a wheelchair for their trip to SDIA in the last 12 months</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_flight_frequency","title":"<code>sdia_flight_frequency = Field(..., description=\"Respondent's number of flights from SDIA in the past 12 months\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Respondent\u2019s number of flights from SDIA in the past 12 months.</p>"},{"location":"api.html#data_model.data_model.AirPassenger.sdia_transit_awareness","title":"<code>sdia_transit_awareness = Field(..., description='Whether respondent is aware that buses are serving SDIA')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether respondent is aware that buses are serving SDIA</p>"},{"location":"api.html#data_model.data_model.AirPassenger.state_of_residence","title":"<code>state_of_residence = Field(..., description='State of residence for US and Mexico residents')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>State of residence for US and Mexico residents.</p>"},{"location":"api.html#data_model.data_model.ArrivingAirPassenger","title":"<code>ArrivingAirPassenger</code>","text":"<p>               Bases: <code>AirPassenger</code></p> <p>Data model for an arriving air passenger. It includes attributes specific to arriving air passengers.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class ArrivingAirPassenger(AirPassenger):\n    \"\"\"\n    Data model for an arriving air passenger. It includes attributes specific to arriving air passengers.\n    \"\"\"\n\n    @computed_field(\n        return_type = str,\n        description = \"Previous flight origin for an arriving passenger\",\n    )\n    @property\n    def previous_flight_origin(cls):\n        \"\"\"\n        Previous flight origin for an arriving passenger\n        \"\"\"\n        if cls.passenger_type == e.PassengerType.ARRIVING:\n            return cls.previous_or_next_airport\n\n    @computed_field(\n        return_type = bool,\n        description = \"True if the previous flight origin was original and not a layover\",\n    )\n    @property\n    def is_original_origin(cls):\n        \"\"\"\n        True if the previous flight origin was original and not a layover\n        \"\"\"\n        return cls.is_direct_flight\n\n    flight_arrival_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description = \"Time of flight arrival\"\n    )\n    \"\"\"\n    Time of flight arrival.\n    \"\"\"\n\n    original_flight_origin: NoneOrNanString[str] = Field(\n        ..., description = \"Original origin for arriving passengers\"\n    )\n    \"\"\"\n    Original origin for arriving passengers.\n    \"\"\"\n</code></pre>"},{"location":"api.html#data_model.data_model.ArrivingAirPassenger.flight_arrival_time","title":"<code>flight_arrival_time = Field(..., description='Time of flight arrival')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time of flight arrival.</p>"},{"location":"api.html#data_model.data_model.ArrivingAirPassenger.is_original_origin","title":"<code>is_original_origin</code>  <code>property</code>","text":"<p>True if the previous flight origin was original and not a layover</p>"},{"location":"api.html#data_model.data_model.ArrivingAirPassenger.original_flight_origin","title":"<code>original_flight_origin = Field(..., description='Original origin for arriving passengers')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Original origin for arriving passengers.</p>"},{"location":"api.html#data_model.data_model.ArrivingAirPassenger.previous_flight_origin","title":"<code>previous_flight_origin</code>  <code>property</code>","text":"<p>Previous flight origin for an arriving passenger</p>"},{"location":"api.html#data_model.data_model.ArrivingPassengerResident","title":"<code>ArrivingPassengerResident</code>","text":"<p>               Bases: <code>ArrivingAirPassenger</code>, <code>Resident</code></p> <p>Data Model for a departing air passenger who is a resident of the San Deigo Region.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class ArrivingPassengerResident(ArrivingAirPassenger, Resident):\n    \"\"\"\n    Data Model for a departing air passenger who is a resident of the San Deigo Region. \n    \"\"\"\n\n    reverse_mode: NoneOrNan[e.TravelMode] = Field(\n        ..., description = \"Mode that was used in the reverse direction\"\n    )\n    \"\"\"\n    Mode that was used in the reverse direction.\n    \"\"\"\n\n    @model_validator(mode=\"after\")\n    def validate_record(cls, values):\n        # Validate using SkipLogicValidator\n        errors, severity_levels, num_errors = skip_logic_validator.validate(\"ArrivingPassengerResident\", values.dict())\n        # Update validation fields\n        #values.valid_record = len(errors) == 0\n        values.validation_error = errors\n        values.validation_severity = cls.determine_severity(severity_levels)\n        values.validation_num_errors = num_errors\n\n        return values\n\n    @staticmethod\n    def determine_severity(severity_levels):\n        if severity_levels[\"Critical\"] &gt; 0:\n            return \"Critical\"\n        elif severity_levels[\"Non-Critical\"] &gt; 0:\n            return \"Non-Critical\"\n        return \"None\"\n\n    pass\n</code></pre>"},{"location":"api.html#data_model.data_model.ArrivingPassengerResident.reverse_mode","title":"<code>reverse_mode = Field(..., description='Mode that was used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode that was used in the reverse direction.</p>"},{"location":"api.html#data_model.data_model.ArrivingPassengerVisitor","title":"<code>ArrivingPassengerVisitor</code>","text":"<p>               Bases: <code>ArrivingAirPassenger</code>, <code>Visitor</code></p> <p>Data Model for an arriving air passenger who is a visitor of the San Deigo Region.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class ArrivingPassengerVisitor(ArrivingAirPassenger, Visitor):\n    \"\"\"\n    Data Model for an arriving air passenger who is a visitor of the San Deigo Region. \n    \"\"\"\n\n    reverse_mode_predicted: NoneOrNan[e.TravelMode] = Field(\n        ..., description = \"Mode that will be used in the reverse direction\"\n    )\n    \"\"\"\n    Mode that will be used in the reverse direction.\n    \"\"\"\n\n    reverse_mode_predicted_other: NoneOrNanString[str] = Field(\n        ..., description = \"Mode (not listed) which will be used in the reverse direction\"\n    )\n    \"\"\"\n    Mode (not listed) which will be used in the reverse direction\n    \"\"\"\n\n    # @model_validator(mode=\"after\")\n    # def validate_missing_fields(cls, values):\n    #     null_fields = [field for field, value in values if value is None and 'other' not in field]\n    #     critical_fields = ['party_size_flight']\n    #     if null_fields:\n    #         values.valid_record = False\n    #         values.validation_error = f\"Missing Fields: {', '.join(null_fields)}\"\n    #         values.validation_num_errors = len(null_fields)\n    #         if len(null_fields)&gt;3:\n    #             values.validation_severity = \"High\"\n    #         else:\n    #             values.validation_severity = \"Low\"\n    #         if any(field in critical_fields for field in null_fields):\n    #             values.validation_severity = \"Critical\"\n    #     return values\n\n    @model_validator(mode=\"after\")\n    def validate_record(cls, values):\n        # Validate using SkipLogicValidator\n        errors, severity_levels, num_errors = skip_logic_validator.validate(\"ArrivingPassengerVisitor\", values.dict())\n\n        # Update validation fields\n        #values.valid_record = len(errors) == 0\n        values.validation_error = errors\n        values.validation_severity = cls.determine_severity(severity_levels)\n        values.validation_num_errors = num_errors\n\n        return values\n\n    @staticmethod\n    def determine_severity(severity_levels):\n        if severity_levels[\"Critical\"] &gt; 0:\n            return \"Critical\"\n        elif severity_levels[\"Non-Critical\"] &gt; 0:\n            return \"Non-Critical\"\n        return \"None\"\n\n    pass\n</code></pre>"},{"location":"api.html#data_model.data_model.ArrivingPassengerVisitor.reverse_mode_predicted","title":"<code>reverse_mode_predicted = Field(..., description='Mode that will be used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode that will be used in the reverse direction.</p>"},{"location":"api.html#data_model.data_model.ArrivingPassengerVisitor.reverse_mode_predicted_other","title":"<code>reverse_mode_predicted_other = Field(..., description='Mode (not listed) which will be used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode (not listed) which will be used in the reverse direction</p>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger","title":"<code>DepartingAirPassenger</code>","text":"<p>               Bases: <code>AirPassenger</code></p> <p>Data model for a departing air passenger. It includes attributes specific to departing air passengers.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class DepartingAirPassenger(AirPassenger):\n    \"\"\"\n    Data model for a departing air passenger. It includes attributes specific to departing air passengers.\n    \"\"\"\n\n    @computed_field(\n        return_type = str,\n        description = \"Next Flight Destination for a departing passenger\",\n    )\n    @property\n    def next_flight_destination(cls):\n        \"\"\"\n        Next Flight Destination for a departing passenger\n        \"\"\"\n        return cls.previous_or_next_airport\n\n    @computed_field(\n        return_type = bool,\n        description = \"True if the next flight destination is final and not a layover\",\n    )\n    @property\n    def is_final_destination(cls):\n        \"\"\"\n        True if the next flight destination is final and not a layover\n        \"\"\"\n        if cls.passenger_type == e.PassengerType.DEPARTING:\n            return cls.is_direct_flight\n\n    final_flight_destination: NoneOrNanString[str] = Field(\n        ..., description = \"Final destination of the flight for departing passengers\"\n    )\n    \"\"\"\n    Final destination of the flight for departing passengers.\n    \"\"\"\n\n    flight_departure_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description = \"Time of flight departure\"\n    )\n    \"\"\"\n    Time of flight departure.\n    \"\"\"\n\n    trip_start_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description=\"Start time of the trip\"\n    )\n    \"\"\"\n    Start time of the trip.\n    \"\"\"\n\n    trip_arrival_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description=\"Arrival time of the trip\"\n    )\n    \"\"\"\n    Arrival time of the trip.\n    \"\"\"\n</code></pre>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger.final_flight_destination","title":"<code>final_flight_destination = Field(..., description='Final destination of the flight for departing passengers')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Final destination of the flight for departing passengers.</p>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger.flight_departure_time","title":"<code>flight_departure_time = Field(..., description='Time of flight departure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time of flight departure.</p>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger.is_final_destination","title":"<code>is_final_destination</code>  <code>property</code>","text":"<p>True if the next flight destination is final and not a layover</p>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger.next_flight_destination","title":"<code>next_flight_destination</code>  <code>property</code>","text":"<p>Next Flight Destination for a departing passenger</p>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger.trip_arrival_time","title":"<code>trip_arrival_time = Field(..., description='Arrival time of the trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Arrival time of the trip.</p>"},{"location":"api.html#data_model.data_model.DepartingAirPassenger.trip_start_time","title":"<code>trip_start_time = Field(..., description='Start time of the trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Start time of the trip.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerResident","title":"<code>DepartingPassengerResident</code>","text":"<p>               Bases: <code>DepartingAirPassenger</code>, <code>Resident</code></p> <p>Data Model for a departing air passenger who is a resident of the San Deigo Region.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class DepartingPassengerResident(DepartingAirPassenger, Resident):\n    \"\"\"\n    Data Model for a departing air passenger who is a resident of the San Deigo Region. \n    \"\"\"\n    car_available: NoneOrNanString[e.CarAvailability] = Field(\n        ..., description = \"Status of car availability for the trip to the airport\"\n    )\n    \"\"\"\n    Status of car availability for the trip to the airport\n    \"\"\"\n\n    car_available_other: NoneOrNanString[str] = Field(\n        ..., description = \"Status of car availability (other than listed) for the trip to the airport\"\n    )\n    \"\"\"\n    Status of car availability (other than listed) for the trip to the airport\n    \"\"\"\n\n    reverse_mode_predicted: NoneOrNan[e.TravelMode] = Field(\n        ..., description = \"Mode that will be used in the reverse direction\"\n    )\n    \"\"\"\n    Mode that will be used in the reverse direction.\n    \"\"\"\n\n    reverse_mode_predicted_grouped: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Grouped Mode that will be used in the reverse direction\")\n    \"\"\"\n    Grouped Mode that will be used in the reverse direction\n    \"\"\"\n\n    reverse_mode_predicted_other: NoneOrNanString[str] = Field(\n        ..., description = \"Mode (not listed) which will be used in the reverse direction\"\n    )\n    \"\"\"\n    Mode (not listed) which will be used in the reverse direction\n    \"\"\"\n\n    @model_validator(mode=\"after\")\n    def validate_record(cls, values):\n        # Validate using SkipLogicValidator\n        errors, severity_levels, num_errors = skip_logic_validator.validate(\"DepartingpassengerResident\", values.dict())\n        # Update validation fields\n        #values.valid_record = len(errors) == 0\n        values.validation_error = errors\n        values.validation_severity = cls.determine_severity(severity_levels)\n        values.validation_num_errors = num_errors\n\n        return values\n\n    @staticmethod\n    def determine_severity(severity_levels):\n        if severity_levels[\"Critical\"] &gt; 0:\n            return \"Critical\"\n        elif severity_levels[\"Non-Critical\"] &gt; 0:\n            return \"Non-Critical\"\n        return \"None\"\n    pass \n</code></pre>"},{"location":"api.html#data_model.data_model.DepartingPassengerResident.car_available","title":"<code>car_available = Field(..., description='Status of car availability for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Status of car availability for the trip to the airport</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerResident.car_available_other","title":"<code>car_available_other = Field(..., description='Status of car availability (other than listed) for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Status of car availability (other than listed) for the trip to the airport</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerResident.reverse_mode_predicted","title":"<code>reverse_mode_predicted = Field(..., description='Mode that will be used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode that will be used in the reverse direction.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerResident.reverse_mode_predicted_grouped","title":"<code>reverse_mode_predicted_grouped = Field(..., description='Grouped Mode that will be used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped Mode that will be used in the reverse direction</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerResident.reverse_mode_predicted_other","title":"<code>reverse_mode_predicted_other = Field(..., description='Mode (not listed) which will be used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode (not listed) which will be used in the reverse direction</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor","title":"<code>DepartingPassengerVisitor</code>","text":"<p>               Bases: <code>DepartingAirPassenger</code>, <code>Visitor</code></p> <p>Data Model for a departing air passenger who is a resident of the San Deigo Region.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class DepartingPassengerVisitor(DepartingAirPassenger, Visitor):\n\n    \"\"\"\n    Data Model for a departing air passenger who is a resident of the San Deigo Region. \n    \"\"\"\n\n    reverse_mode: NoneOrNan[e.TravelMode] = Field(\n        ..., description = \"Mode that was used in the reverse direction\"\n    )\n    \"\"\"\n    Mode that was used in the reverse direction.\n    \"\"\"\n\n    reverse_mode_grouped: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Grouped Mode that was used in the reverse direction\")\n    \"\"\"\n    Grouped Mode that was used in the reverse direction\n    \"\"\"\n    reverse_mode_combined: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Mode in the reverse direction\")\n    \"\"\"\n    Mode in the reverse direction.\n    \"\"\"\n\n    reverse_mode_combined_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other mode in the reverse direction\")\n    \"\"\"\n    Other mode in the reverse direction.\n    \"\"\"\n\n\n    general_modes_used_visitor_taxi: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used Taxi as a mode during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used Taxi as a mode during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_uber_lyft: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used Uber or Lyft as a mode during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used Uber or Lyft as a mode during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_car_black: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a black car service as a mode during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a black car service as a mode during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_dropped_off_by_family_friend: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor was dropped off by a family member or friend during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor was dropped off by a family member or friend during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_drove_alone_and_parked: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor drove alone and parked during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor drove alone and parked during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_drove_with_others_and_parked: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor drove with others and parked during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor drove with others and parked during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_rode_with_other_travelers_and_parked: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor rode with other travelers and parked during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor rode with other travelers and parked during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_coaster: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used the Coaster train during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used the Coaster train during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_mts_red_trolley: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used the MTS Red Trolley during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used the MTS Red Trolley during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_other_public_bus: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used other public bus services during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used other public bus services during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_other_public_transit: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used other public transit services during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used other public transit services during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_rental_car_dropped_off: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a rental car and was dropped off during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a rental car and was dropped off during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_rental_car_parked: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a rental car and parked during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a rental car and parked during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_chartered_tour_bus: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a chartered tour bus during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a chartered tour bus during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_hotel_shuttle_van: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a hotel shuttle or van during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a hotel shuttle or van during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_employee_shuttle: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used an employee shuttle during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used an employee shuttle during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_other_shared_van: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used another type of shared van service during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used another type of shared van service during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_walk: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor walked as a mode during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor walked as a mode during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_wheelchair: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a wheelchair during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a wheelchair during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_bicycle_electric_bikeshare: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used an electric bicycle through a bikeshare service during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used an electric bicycle through a bikeshare service during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_bicycle_non_electric_bikeshare: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a non-electric bicycle through a bikeshare service during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a non-electric bicycle through a bikeshare service during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_bicycle_personal_electric_bicycle: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used their personal electric bicycle during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used their personal electric bicycle during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_bicycle_personal_non_electric_bicycle: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used their personal non-electric bicycle during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used their personal non-electric bicycle during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_e_scooter_shared: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used a shared e-scooter during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used a shared e-scooter during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_e_scooter_personal: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the visitor used their personal e-scooter during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    True if the visitor used their personal e-scooter during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other mode used by the visitor during their visit to the San Diego Region.\"\n    )\n    \"\"\"\n    Other mode used by the visitor during their visit to the San Diego Region.\n    \"\"\"\n\n    general_modes_used_visitor_list: NoneOrNanString[str] = Field(\n        ..., description = \"List of modes used by the visitor during their visit to the San Diego Region\"\n    )\n    \"\"\"\n    List of modes used by the visitor during their visit to the San Diego Region\n    \"\"\"\n\n    @model_validator(mode=\"after\")\n    def validate_record(cls, values):\n        # Validate using SkipLogicValidator\n        errors, severity_levels, num_errors = skip_logic_validator.validate(\"DepartingPassengerVisitor\", values.dict())\n        # Update validation fields\n        #values.valid_record = len(errors) == 0\n        values.validation_error = errors\n        values.validation_severity = cls.determine_severity(severity_levels)\n        values.validation_num_errors = num_errors\n\n        return values\n\n    @staticmethod\n    def determine_severity(severity_levels):\n        if severity_levels[\"Critical\"] &gt; 0:\n            return \"Critical\"\n        elif severity_levels[\"Non-Critical\"] &gt; 0:\n            return \"Non-Critical\"\n        return \"None\"\n    pass\n</code></pre>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_bicycle_electric_bikeshare","title":"<code>general_modes_used_visitor_bicycle_electric_bikeshare = Field(..., description='True if the visitor used an electric bicycle through a bikeshare service during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used an electric bicycle through a bikeshare service during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_bicycle_non_electric_bikeshare","title":"<code>general_modes_used_visitor_bicycle_non_electric_bikeshare = Field(..., description='True if the visitor used a non-electric bicycle through a bikeshare service during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a non-electric bicycle through a bikeshare service during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_bicycle_personal_electric_bicycle","title":"<code>general_modes_used_visitor_bicycle_personal_electric_bicycle = Field(..., description='True if the visitor used their personal electric bicycle during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used their personal electric bicycle during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_bicycle_personal_non_electric_bicycle","title":"<code>general_modes_used_visitor_bicycle_personal_non_electric_bicycle = Field(..., description='True if the visitor used their personal non-electric bicycle during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used their personal non-electric bicycle during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_car_black","title":"<code>general_modes_used_visitor_car_black = Field(..., description='True if the visitor used a black car service as a mode during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a black car service as a mode during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_chartered_tour_bus","title":"<code>general_modes_used_visitor_chartered_tour_bus = Field(..., description='True if the visitor used a chartered tour bus during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a chartered tour bus during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_coaster","title":"<code>general_modes_used_visitor_coaster = Field(..., description='True if the visitor used the Coaster train during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used the Coaster train during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_dropped_off_by_family_friend","title":"<code>general_modes_used_visitor_dropped_off_by_family_friend = Field(..., description='True if the visitor was dropped off by a family member or friend during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor was dropped off by a family member or friend during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_drove_alone_and_parked","title":"<code>general_modes_used_visitor_drove_alone_and_parked = Field(..., description='True if the visitor drove alone and parked during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor drove alone and parked during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_drove_with_others_and_parked","title":"<code>general_modes_used_visitor_drove_with_others_and_parked = Field(..., description='True if the visitor drove with others and parked during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor drove with others and parked during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_e_scooter_personal","title":"<code>general_modes_used_visitor_e_scooter_personal = Field(..., description='True if the visitor used their personal e-scooter during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used their personal e-scooter during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_e_scooter_shared","title":"<code>general_modes_used_visitor_e_scooter_shared = Field(..., description='True if the visitor used a shared e-scooter during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a shared e-scooter during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_employee_shuttle","title":"<code>general_modes_used_visitor_employee_shuttle = Field(..., description='True if the visitor used an employee shuttle during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used an employee shuttle during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_hotel_shuttle_van","title":"<code>general_modes_used_visitor_hotel_shuttle_van = Field(..., description='True if the visitor used a hotel shuttle or van during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a hotel shuttle or van during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_list","title":"<code>general_modes_used_visitor_list = Field(..., description='List of modes used by the visitor during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of modes used by the visitor during their visit to the San Diego Region</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_mts_red_trolley","title":"<code>general_modes_used_visitor_mts_red_trolley = Field(..., description='True if the visitor used the MTS Red Trolley during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used the MTS Red Trolley during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_other","title":"<code>general_modes_used_visitor_other = Field(..., description='Other mode used by the visitor during their visit to the San Diego Region.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other mode used by the visitor during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_other_public_bus","title":"<code>general_modes_used_visitor_other_public_bus = Field(..., description='True if the visitor used other public bus services during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used other public bus services during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_other_public_transit","title":"<code>general_modes_used_visitor_other_public_transit = Field(..., description='True if the visitor used other public transit services during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used other public transit services during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_other_shared_van","title":"<code>general_modes_used_visitor_other_shared_van = Field(..., description='True if the visitor used another type of shared van service during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used another type of shared van service during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_rental_car_dropped_off","title":"<code>general_modes_used_visitor_rental_car_dropped_off = Field(..., description='True if the visitor used a rental car and was dropped off during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a rental car and was dropped off during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_rental_car_parked","title":"<code>general_modes_used_visitor_rental_car_parked = Field(..., description='True if the visitor used a rental car and parked during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a rental car and parked during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_rode_with_other_travelers_and_parked","title":"<code>general_modes_used_visitor_rode_with_other_travelers_and_parked = Field(..., description='True if the visitor rode with other travelers and parked during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor rode with other travelers and parked during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_taxi","title":"<code>general_modes_used_visitor_taxi = Field(..., description='True if the visitor used Taxi as a mode during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used Taxi as a mode during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_uber_lyft","title":"<code>general_modes_used_visitor_uber_lyft = Field(..., description='True if the visitor used Uber or Lyft as a mode during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used Uber or Lyft as a mode during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_walk","title":"<code>general_modes_used_visitor_walk = Field(..., description='True if the visitor walked as a mode during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor walked as a mode during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.general_modes_used_visitor_wheelchair","title":"<code>general_modes_used_visitor_wheelchair = Field(..., description='True if the visitor used a wheelchair during their visit to the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the visitor used a wheelchair during their visit to the San Diego Region.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.reverse_mode","title":"<code>reverse_mode = Field(..., description='Mode that was used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode that was used in the reverse direction.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.reverse_mode_combined","title":"<code>reverse_mode_combined = Field(..., description='Mode in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mode in the reverse direction.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.reverse_mode_combined_other","title":"<code>reverse_mode_combined_other = Field(..., description='Other mode in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other mode in the reverse direction.</p>"},{"location":"api.html#data_model.data_model.DepartingPassengerVisitor.reverse_mode_grouped","title":"<code>reverse_mode_grouped = Field(..., description='Grouped Mode that was used in the reverse direction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped Mode that was used in the reverse direction</p>"},{"location":"api.html#data_model.data_model.Employee","title":"<code>Employee</code>","text":"<p>               Bases: <code>Respondent</code></p> <p>Data model for an employee respondent. It includes attributes specific to employees.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class Employee(Respondent):\n    \"\"\"\n    Data model for an employee respondent. It includes attributes specific to employees.\n    \"\"\"\n\n    # shift_start_location: NoneOrNan[Coord] = Field(\n    #     ..., description = \"Longitude and Latitude of building where the employee starts their shift\"\n    # )\n    # \"\"\"\n    # Longitude and Latitude of building where the employee starts their shift.\n    # \"\"\"\n\n    trip_start_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description=\"Start time of the trip\"\n    )\n    \"\"\"\n    Start time of the trip.\n    \"\"\"\n\n    trip_arrival_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description=\"Arrival time of the trip\"\n    )\n    \"\"\"\n    Arrival time of the trip.\n    \"\"\"\n\n    shift_start_airport_building: NoneOrNanString[e.SanBuildings] = Field(\n        ..., description = \"Name of building where employee starts their shift\"\n    )\n    \"\"\"\n    Name of building where employee starts their shift.\n    \"\"\"\n\n    shift_start_airport_building_other: NoneOrNanString[str] = Field(\n        ..., description = \"Name of building (not listed) where employee starts their shift\"\n    )\n    \"\"\"\n    Name of building (not listed) where employee starts their shift.\n    \"\"\"\n\n    employer: NoneOrNanString[e.Employers] = Field(\n        ..., description = \"Name of respondent's employer\"\n    )\n    \"\"\"\n    Name of  respondent's employer.\n    \"\"\"\n\n    employer_other: NoneOrNanString[str] = Field(\n        ..., description = \"Name (not listed) of respondent's employer\"\n    )\n    \"\"\"\n    Name (not listed) of respondent's employer.\n    \"\"\"\n\n    occupation: NoneOrNanString[e.Occupations] = Field(\n        ..., description = \"Occupation of the employee\"\n    )\n    \"\"\"\n    Occupation of the employee.\n    \"\"\"\n\n    occupation_other: NoneOrNanString[str] = Field(\n        ..., description = \"Occupation (other, not listed) of the employee\"\n    )\n    \"\"\"\n    Occupation (other, not listed) of the employee\n    \"\"\"\n\n    occupation_detail: NoneOrNan[e.OccupationDetail] = Field(\n        ..., description = \"Occupation Details for the airport employee\"\n    )\n    \"\"\"\n    Occupation Details for the airport employee\n    \"\"\"\n\n    number_hours_worked: NoneOrNan[e.HoursWorked] = Field(\n        ..., description = \"Number of hours respondent worked in the past 7 days\"\n    )\n    \"\"\"\n    Number of hours respondent worked in the past 7 days.\n    \"\"\"\n\n    number_commute_days: NoneOrNan[e.CommuteDays] = Field(\n        ..., description = \"Number of days respondent commuted to the airport in the past 7 days\"\n    )\n    \"\"\"\n    Number of days respondent commuted to the airport in the past 7 days.\n    \"\"\"\n\n    shift_start_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description = \"Time when the employee's shift starts\"\n    )\n    \"\"\"\n    Time when the employee's shift starts.\n    \"\"\"\n\n    shift_end_time: NoneOrNan[e.DepartTime] = Field(\n        ..., description = \"Time when the employee's shift ends\"\n    )\n    \"\"\"\n    Time when the employee's shift ends.\n    \"\"\"\n# Add New Here\n\n    reverse_commute_mode: NoneOrNan[e.TravelMode] = Field(\n        ..., description = \"Reverse commute mode for the employee\"\n    )\n    \"\"\"\n    Reverse commute mode for the employee\n    \"\"\"\n\n    reverse_commute_mode_other: NoneOrNanString[str] = Field(\n        ..., description = \"Reverse commute mode for the employee (other, not listed)\"\n    )\n    \"\"\"\n    Reverse commute mode for the employee (other, not listed)\n    \"\"\"\n\n    reverse_commute_mode_grouped: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Grouped reverse commute mode for the employee\"\n    )\n    \"\"\"\n    Grouped reverse commute mode for the employee\n    \"\"\"\n\n    same_commute_mode: NoneOrNanString[e.YesNoType] = Field(\n        ..., description = \"True if the employee always used the same travel mode to commute in the last 30 days\"\n    )\n    \"\"\"\n    True if the employee always used the same travel mode to commute in the last 30 days\n    \"\"\"\n\n    same_commute_mode_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other Response to employee's travel mode to commute in the last 30 days\"\n    )\n    \"\"\"\n    Other Response to employee's travel mode to commute in the last 30 days\n    \"\"\"\n\n    alt_commute_mode_taxi: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used Taxi as a mode to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used Taxi as a mode to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_uber_lyft: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used Uber or Lyft as a mode to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used Uber or Lyft as a mode to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_car_black: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used a black car service as a mode to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used a black car service as a mode to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_picked_by_family_friend: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee was picked up by a family member or friend to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee was picked up by a family member or friend to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_parked_vehicle_and_drive_alone: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee drove alone and parked their vehicle while commuting to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee drove alone and parked their vehicle while commuting to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_parked_vehicle_and_drive_with_others: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee drove with others and parked their vehicle while commuting to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee drove with others and parked their vehicle while commuting to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_parked_vehicle_and_ride_with_other_travelers: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee rode with other travelers and parked their vehicle while commuting to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee rode with other travelers and parked their vehicle while commuting to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_mts_route_992: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used MTS Route 992 to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used MTS Route 992 to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_airport_flyer_shuttle: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used the Airport Flyer Shuttle to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used the Airport Flyer Shuttle to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_other_public_transit: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used other public transit services to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used other public transit services to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_other_shared_van: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used another type of shared van service to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used another type of shared van service to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_walk: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee walked as a mode to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee walked as a mode to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_wheelchair: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used a wheelchair to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used a wheelchair to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_bicycle_electric_bikeshare: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used an electric bicycle through a bikeshare service to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used an electric bicycle through a bikeshare service to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_bicycle_non_electric_bikeshare: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used a non-electric bicycle through a bikeshare service to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used a non-electric bicycle through a bikeshare service to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_bicycle_personal_electric_bicycle: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used their personal electric bicycle to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used their personal electric bicycle to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_bicycle_personal_non_electric_bicycle: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used their personal non-electric bicycle to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used their personal non-electric bicycle to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_e_scooter_shared: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used a shared e-scooter to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used a shared e-scooter to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_e_scooter_personal: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the employee used their personal e-scooter to commute to the airport in the past 30 days\"\n    )\n    \"\"\"\n    True if the employee used their personal e-scooter to commute to the airport in the past 30 days.\n    \"\"\"\n\n    alt_commute_mode_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other mode used by the employee to commute to the airport in the past 30 days.\"\n    )\n    \"\"\"\n    Other mode used by the employee to commute to the airport in the past 30 days\n    \"\"\"\n\n    alt_commute_mode_list: NoneOrNanString[str] = Field(\n        ..., description = \"List of modes used by the employee to commute to the airport in the past 30 days.\")\n    \"\"\"\n    List of modes used by the employee to commute to the airport in the past 30 days\n    \"\"\"\n\n\n    commute_mode_decision: NoneOrNanString[e.ModeDecision] = Field(\n        ..., description = \"Factor affecting the Mode choice of the employee\"\n    )\n    \"\"\"\n    Factor affecting the Mode choice of the employee\n    \"\"\"\n\n    commute_mode_decision_other: NoneOrNanString[str] = Field(\n        ..., description = \"(Other) Factor affecting the Mode choice of the employee\"\n    )\n    \"\"\"\n    (Other) Factor affecting the Mode choice of the employee\n    \"\"\"\n\n    # past_commute_modes: List[NoneOrNan[e.TravelMode]] = Field(\n    #     ..., description = \"Modes used to commute to SDIA in the past 12 months\"\n    # )\n    # \"\"\"\n    # Modes used to commute to SDIA in the past 12 months.\n    # \"\"\"\n\n    # alternative_commute_modes: List[NoneOrNan[e.TravelMode]] = Field(\n    #     ..., description = \"Modes used to travel to SDIA in the past 30 days\"\n    # )\n    # \"\"\"\n    # Modes used to travel to SDIA in the past 30 days.\n    # \"\"\"\n\n    # commute_mode_decision: List[NoneOrNan[e.CommuteModeDecision]] = Field(\n    #     ..., description = \"Factors affecting mode choice, for respondents who do not always use the same mode\"\n    # )\n    # \"\"\"\n    # Factors affecting mode choice, for respondents who do not always use the same mode.\n    # \"\"\"\n\n    employee_parking: NoneOrNanString[bool] = Field(\n        ..., description = \"Whether the respondent has access to employee parking\"\n    )\n    \"\"\"\n    Whether the respondent has access to employee parking.\n    \"\"\"\n\n    # @model_validator(mode=\"after\")\n    # def validate_missing_fields(cls, values):\n    #     null_fields = [field for field, value in values if value is None and 'other' not in field]\n    #     critical_fields = []\n    #     if null_fields:\n    #         values.valid_record = False\n    #         values.validation_error = f\"Missing Fields: {', '.join(null_fields)}\"\n    #         values.validation_num_errors = len(null_fields)\n    #         if len(null_fields)&gt;3:\n    #             values.validation_severity = \"High\"\n    #         else:\n    #             values.validation_severity = \"Low\"\n    #         if any(field in critical_fields for field in null_fields):\n    #             values.validation_severity = \"Critical\"\n    #     return values\n\n    @model_validator(mode=\"after\")\n    def validate_record(cls, values):\n        # Validate using SkipLogicValidator\n        errors, severity_levels, num_errors = skip_logic_validator.validate(\"Employee\", values.dict())\n        # Update validation fields\n        #values.valid_record = len(errors) == 0\n        values.validation_error = errors\n        values.validation_severity = cls.determine_severity(severity_levels)\n        values.validation_num_errors = num_errors\n\n        return values\n\n    @staticmethod\n    def determine_severity(severity_levels):\n        if severity_levels[\"Critical\"] &gt; 0:\n            return \"Critical\"\n        elif severity_levels[\"Non-Critical\"] &gt; 0:\n            return \"Non-Critical\"\n        return \"None\"\n</code></pre>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_airport_flyer_shuttle","title":"<code>alt_commute_mode_airport_flyer_shuttle = Field(..., description='True if the employee used the Airport Flyer Shuttle to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used the Airport Flyer Shuttle to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_bicycle_electric_bikeshare","title":"<code>alt_commute_mode_bicycle_electric_bikeshare = Field(..., description='True if the employee used an electric bicycle through a bikeshare service to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used an electric bicycle through a bikeshare service to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_bicycle_non_electric_bikeshare","title":"<code>alt_commute_mode_bicycle_non_electric_bikeshare = Field(..., description='True if the employee used a non-electric bicycle through a bikeshare service to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used a non-electric bicycle through a bikeshare service to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_bicycle_personal_electric_bicycle","title":"<code>alt_commute_mode_bicycle_personal_electric_bicycle = Field(..., description='True if the employee used their personal electric bicycle to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used their personal electric bicycle to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_bicycle_personal_non_electric_bicycle","title":"<code>alt_commute_mode_bicycle_personal_non_electric_bicycle = Field(..., description='True if the employee used their personal non-electric bicycle to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used their personal non-electric bicycle to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_car_black","title":"<code>alt_commute_mode_car_black = Field(..., description='True if the employee used a black car service as a mode to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used a black car service as a mode to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_e_scooter_personal","title":"<code>alt_commute_mode_e_scooter_personal = Field(..., description='True if the employee used their personal e-scooter to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used their personal e-scooter to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_e_scooter_shared","title":"<code>alt_commute_mode_e_scooter_shared = Field(..., description='True if the employee used a shared e-scooter to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used a shared e-scooter to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_list","title":"<code>alt_commute_mode_list = Field(..., description='List of modes used by the employee to commute to the airport in the past 30 days.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of modes used by the employee to commute to the airport in the past 30 days</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_mts_route_992","title":"<code>alt_commute_mode_mts_route_992 = Field(..., description='True if the employee used MTS Route 992 to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used MTS Route 992 to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_other","title":"<code>alt_commute_mode_other = Field(..., description='Other mode used by the employee to commute to the airport in the past 30 days.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other mode used by the employee to commute to the airport in the past 30 days</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_other_public_transit","title":"<code>alt_commute_mode_other_public_transit = Field(..., description='True if the employee used other public transit services to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used other public transit services to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_other_shared_van","title":"<code>alt_commute_mode_other_shared_van = Field(..., description='True if the employee used another type of shared van service to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used another type of shared van service to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_parked_vehicle_and_drive_alone","title":"<code>alt_commute_mode_parked_vehicle_and_drive_alone = Field(..., description='True if the employee drove alone and parked their vehicle while commuting to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee drove alone and parked their vehicle while commuting to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_parked_vehicle_and_drive_with_others","title":"<code>alt_commute_mode_parked_vehicle_and_drive_with_others = Field(..., description='True if the employee drove with others and parked their vehicle while commuting to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee drove with others and parked their vehicle while commuting to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_parked_vehicle_and_ride_with_other_travelers","title":"<code>alt_commute_mode_parked_vehicle_and_ride_with_other_travelers = Field(..., description='True if the employee rode with other travelers and parked their vehicle while commuting to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee rode with other travelers and parked their vehicle while commuting to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_picked_by_family_friend","title":"<code>alt_commute_mode_picked_by_family_friend = Field(..., description='True if the employee was picked up by a family member or friend to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee was picked up by a family member or friend to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_taxi","title":"<code>alt_commute_mode_taxi = Field(..., description='True if the employee used Taxi as a mode to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used Taxi as a mode to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_uber_lyft","title":"<code>alt_commute_mode_uber_lyft = Field(..., description='True if the employee used Uber or Lyft as a mode to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used Uber or Lyft as a mode to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_walk","title":"<code>alt_commute_mode_walk = Field(..., description='True if the employee walked as a mode to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee walked as a mode to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.alt_commute_mode_wheelchair","title":"<code>alt_commute_mode_wheelchair = Field(..., description='True if the employee used a wheelchair to commute to the airport in the past 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee used a wheelchair to commute to the airport in the past 30 days.</p>"},{"location":"api.html#data_model.data_model.Employee.commute_mode_decision","title":"<code>commute_mode_decision = Field(..., description='Factor affecting the Mode choice of the employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Factor affecting the Mode choice of the employee</p>"},{"location":"api.html#data_model.data_model.Employee.commute_mode_decision_other","title":"<code>commute_mode_decision_other = Field(..., description='(Other) Factor affecting the Mode choice of the employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>(Other) Factor affecting the Mode choice of the employee</p>"},{"location":"api.html#data_model.data_model.Employee.employee_parking","title":"<code>employee_parking = Field(..., description='Whether the respondent has access to employee parking')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the respondent has access to employee parking.</p>"},{"location":"api.html#data_model.data_model.Employee.employer","title":"<code>employer = Field(..., description=\"Name of respondent's employer\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of  respondent\u2019s employer.</p>"},{"location":"api.html#data_model.data_model.Employee.employer_other","title":"<code>employer_other = Field(..., description=\"Name (not listed) of respondent's employer\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name (not listed) of respondent\u2019s employer.</p>"},{"location":"api.html#data_model.data_model.Employee.number_commute_days","title":"<code>number_commute_days = Field(..., description='Number of days respondent commuted to the airport in the past 7 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of days respondent commuted to the airport in the past 7 days.</p>"},{"location":"api.html#data_model.data_model.Employee.number_hours_worked","title":"<code>number_hours_worked = Field(..., description='Number of hours respondent worked in the past 7 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of hours respondent worked in the past 7 days.</p>"},{"location":"api.html#data_model.data_model.Employee.occupation","title":"<code>occupation = Field(..., description='Occupation of the employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Occupation of the employee.</p>"},{"location":"api.html#data_model.data_model.Employee.occupation_detail","title":"<code>occupation_detail = Field(..., description='Occupation Details for the airport employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Occupation Details for the airport employee</p>"},{"location":"api.html#data_model.data_model.Employee.occupation_other","title":"<code>occupation_other = Field(..., description='Occupation (other, not listed) of the employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Occupation (other, not listed) of the employee</p>"},{"location":"api.html#data_model.data_model.Employee.reverse_commute_mode","title":"<code>reverse_commute_mode = Field(..., description='Reverse commute mode for the employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Reverse commute mode for the employee</p>"},{"location":"api.html#data_model.data_model.Employee.reverse_commute_mode_grouped","title":"<code>reverse_commute_mode_grouped = Field(..., description='Grouped reverse commute mode for the employee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped reverse commute mode for the employee</p>"},{"location":"api.html#data_model.data_model.Employee.reverse_commute_mode_other","title":"<code>reverse_commute_mode_other = Field(..., description='Reverse commute mode for the employee (other, not listed)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Reverse commute mode for the employee (other, not listed)</p>"},{"location":"api.html#data_model.data_model.Employee.same_commute_mode","title":"<code>same_commute_mode = Field(..., description='True if the employee always used the same travel mode to commute in the last 30 days')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the employee always used the same travel mode to commute in the last 30 days</p>"},{"location":"api.html#data_model.data_model.Employee.same_commute_mode_other","title":"<code>same_commute_mode_other = Field(..., description=\"Other Response to employee's travel mode to commute in the last 30 days\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Response to employee\u2019s travel mode to commute in the last 30 days</p>"},{"location":"api.html#data_model.data_model.Employee.shift_end_time","title":"<code>shift_end_time = Field(..., description=\"Time when the employee's shift ends\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time when the employee\u2019s shift ends.</p>"},{"location":"api.html#data_model.data_model.Employee.shift_start_airport_building","title":"<code>shift_start_airport_building = Field(..., description='Name of building where employee starts their shift')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of building where employee starts their shift.</p>"},{"location":"api.html#data_model.data_model.Employee.shift_start_airport_building_other","title":"<code>shift_start_airport_building_other = Field(..., description='Name of building (not listed) where employee starts their shift')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of building (not listed) where employee starts their shift.</p>"},{"location":"api.html#data_model.data_model.Employee.shift_start_time","title":"<code>shift_start_time = Field(..., description=\"Time when the employee's shift starts\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time when the employee\u2019s shift starts.</p>"},{"location":"api.html#data_model.data_model.Employee.trip_arrival_time","title":"<code>trip_arrival_time = Field(..., description='Arrival time of the trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Arrival time of the trip.</p>"},{"location":"api.html#data_model.data_model.Employee.trip_start_time","title":"<code>trip_start_time = Field(..., description='Start time of the trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Start time of the trip.</p>"},{"location":"api.html#data_model.data_model.Lat","title":"<code>Lat</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>data_model/data_model.py</code> <pre><code>class Lat(BaseModel):\n    lat: Latitude\n    \"\"\"Latitude\"\"\"\n</code></pre>"},{"location":"api.html#data_model.data_model.Lat.lat","title":"<code>lat</code>  <code>instance-attribute</code>","text":"<p>Latitude</p>"},{"location":"api.html#data_model.data_model.Lng","title":"<code>Lng</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>data_model/data_model.py</code> <pre><code>class Lng(BaseModel):\n    lng: Longitude\n    \"\"\"Longitude\"\"\"\n</code></pre>"},{"location":"api.html#data_model.data_model.Lng.lng","title":"<code>lng</code>  <code>instance-attribute</code>","text":"<p>Longitude</p>"},{"location":"api.html#data_model.data_model.PydanticModel","title":"<code>PydanticModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all Pydantic models, create in case future modifications are helpful</p> Source code in <code>data_model/data_model.py</code> <pre><code>class PydanticModel(BaseModel):\n    \"\"\"\n    Base class for all Pydantic models, create in case future modifications are helpful\n    \"\"\"\n\n    # valid_record: bool = Field(\n    #     default=True, description=\"Indicates if the record is valid\")\n    # \"\"\"\n    # Indicates if the record is valid\n    # \"\"\"\n\n    validation_error: str = Field(\n        default=\"\", description=\"Holds validation error messages\")\n    \"\"\"\n    Holds the validation error message\n    \"\"\"\n\n    validation_severity: str = Field(\n        default = \"\", description = \"Holds the severity of the validation error\"\n    )\n    \"\"\"\n    Holds the severity of the validation error\n    \"\"\"\n\n    validation_num_errors: int = Field(\n        default = 0, description = \"Number of missing (null) fields for the record\"\n    )\n    \"\"\"\n    Number of missing (null) fields for the record\n    \"\"\"\n\n    @model_validator(mode=\"before\")\n    def check_validation_of_numeric_value(cls, values):\n        # List of fields to validate\n        fields_to_check = ['taxi_fhv_fare', 'taxi_fhv_wait', 'parking_cost']\n\n        for field in fields_to_check:\n            value = values.get(field)\n            if isinstance(value, datetime):\n                values[field] = value.strftime('%Y-%m-%d %H:%M:%S') #change to pass through the data model anyway\n                #values['valid_record'] = False\n                values['validation_severity'] = \"Low\"\n                values['validation_error'] = f\"{field} is datetime\"\n\n        return values\n</code></pre>"},{"location":"api.html#data_model.data_model.PydanticModel.validation_error","title":"<code>validation_error = Field(default='', description='Holds validation error messages')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Holds the validation error message</p>"},{"location":"api.html#data_model.data_model.PydanticModel.validation_num_errors","title":"<code>validation_num_errors = Field(default=0, description='Number of missing (null) fields for the record')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of missing (null) fields for the record</p>"},{"location":"api.html#data_model.data_model.PydanticModel.validation_severity","title":"<code>validation_severity = Field(default='', description='Holds the severity of the validation error')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Holds the severity of the validation error</p>"},{"location":"api.html#data_model.data_model.Resident","title":"<code>Resident</code>","text":"<p>               Bases: <code>Respondent</code></p> <p>Data Model for a Air Passenger who is a resident of the San Deigo Region. It includes attributes specific to a Resident.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class Resident(Respondent):\n    \"\"\"\n    Data Model for a Air Passenger who is a resident of the San Deigo Region. It includes attributes specific to a Resident.\n    \"\"\"\n\n    nights_away: NoneOrNan[e.TravelDuration] = Field(\n        ..., description = \"Number of nights the departing air passengers will be away\"\n    )\n    \"\"\"\n    Number of nights the departing air passengers will be away.\n    \"\"\"\n\n    general_use_transit_resident: NoneOrNan[e.TransitUseFrequency] = Field(\n        ..., description = \"General transit use frequency by residents of San Diego region in San Diego region\"\n    )\n    \"\"\"\n    General transit use frequency by residents of San Diego region in San Diego region.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api.html#data_model.data_model.Resident.general_use_transit_resident","title":"<code>general_use_transit_resident = Field(..., description='General transit use frequency by residents of San Diego region in San Diego region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>General transit use frequency by residents of San Diego region in San Diego region.</p>"},{"location":"api.html#data_model.data_model.Resident.nights_away","title":"<code>nights_away = Field(..., description='Number of nights the departing air passengers will be away')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of nights the departing air passengers will be away.</p>"},{"location":"api.html#data_model.data_model.Respondent","title":"<code>Respondent</code>","text":"<p>               Bases: <code>PydanticModel</code></p> <p>Data model for a survey respondent. It includes attributes common to air passengers and employees.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class Respondent(PydanticModel):\n    \"\"\"\n    Data model for a survey respondent. It includes attributes common to air passengers and employees.\n    \"\"\"\n\n    is_completed: bool = Field(\n        ..., description = \"True if the record is complete\"\n    )\n    \"\"\"\n    True if the record is complete\n    \"\"\"\n\n    is_self_administered: bool = Field(\n        default = False, description = \"True if the survey was self-administered by the respondent\")\n    \"\"\"\n    True if the survey was self-administered by the respondent.\n    \"\"\"\n\n    respondentid: Union[int,str] = Field(\n        ..., description=\"Unique identifier for the respondent\")\n    \"\"\"\n    Unique identifier for the respondent.\n    \"\"\"\n\n    is_pilot: bool = Field(\n        ..., description = \"True if the record was collected during the pilot survey\"\n    )\n    \"\"\"\n    True if the record was collected during the pilot survey\n    \"\"\"\n\n    record_type_synthetic: bool =  Field(\n        ..., description = \"True if the record is synthetically generated\"\n    )\n    \"\"\"\n    True if the record is synthetically generated\n    \"\"\"\n\n\n    date_completed: NoneOrNanString[datetime] = Field(\n        ..., description = \"Date when respondent completed the survey\"\n    )\n    \"\"\"\n    Date when respondent completed the survey\n    \"\"\"\n\n    time_completed: NoneOrNanString[time] = Field(\n        ..., description = \"Time when respondent completed the survey\"\n    )\n    \"\"\"\n    Time when respondent completed the survey\n    \"\"\"\n\n\n    initial_etc_check: NoneOrNanString[bool] = Field(\n        ..., description = \"True if the record passed ETC's initial check\"\n    )\n\n    \"\"\"\n    True if the record is to be used for submittal\n    \"\"\"\n\n    weight: float = Field(\n        ..., description = 'Expansion Factor of the observation'\n    )\n    \"\"\"\n    Expansion Factor of the observation\n    \"\"\"\n\n    interview_location: NoneOrNan[e.InterviewLocation] = Field(\n        ..., description = \"Location where respondent was intercepted\")\n    \"\"\"\n    Location where respondent was intercepted.\n    \"\"\"\n\n    interview_location_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other Location where respondent was intercepted\")\n    \"\"\"\n    Other Location where respondent was intercepted\n    \"\"\"\n\n    marketsegment: NoneOrNan[e.Type] = Field(\n        ..., description=\"Type of respondent, either passenger, employee, or other\"\n    )\n    \"\"\"\n    Type of respondent, either passenger, employee, or other.\n    \"\"\"\n\n    is_qualified_age: NoneOrNanString[bool] = Field(\n        ...,\n        description=\"Whether the respondent is of a qualified age to participate in the survey\",\n    )\n    \"\"\"\n    Whether the respondent is of a qualified age to participate in the survey.\n    \"\"\"\n\n    resident_visitor: NoneOrNan[e.ResidentVisitor] = Field(\n        ...,\n        description=\"Where the respondent resides in the airport service area most of the year\",\n    )\n    \"\"\"\n    Where the respondent resides in the airport service area most of the year.\n    \"\"\"\n\n    home_location_city: NoneOrNanString[str] =  Field(\n        ..., description = \"City of the home location of the respondent\"\n    )\n    \"\"\"\n    City of the home location of the respondent\n    \"\"\"\n\n    home_location_state: NoneOrNanString[str] =  Field(\n        ..., description = \"State of the home location of the respondent\"\n    )\n    \"\"\"\n    State of the home location of the respondent\n    \"\"\"\n\n    home_location_zip: NoneOrNanString[Union[str,int]] =  Field(\n        ..., description = \"ZIP of the home location of the respondent\"\n    )\n    \"\"\"\n    ZIP of the home location of the respondent\n    \"\"\"\n\n    home_location_latitude: NoneOrNanString[Latitude] =  Field(\n        ..., description = \"Latitude of the home location of the respondent\"\n    )\n    \"\"\"\n    Latitude of the home location of the respondent\n    \"\"\"\n\n    home_location_longitude: NoneOrNanString[Longitude]=   Field(\n        ..., description = \"Longitude of the home location of the respondent\"\n    )\n    \"\"\"\n    Longitude of the home location of the respondent\n    \"\"\"\n\n    home_location_municipal_zone: NoneOrNanString[str] = Field(\n        ..., description=\"Municipal zone of home address of the respondent\"\n    )\n    \"\"\"\n    Municipal zone of home address of the Resident\n    \"\"\"\n\n    home_location_pmsa: NoneOrNanString[e.PMSA] = Field(\n        ..., description=\"Pseudo MSA of home address of the Resident\"\n    )\n    \"\"\"\n    Pseudo MSA of home address of the Resident\n    \"\"\"\n #Add new here\n    # home_location_address: NoneOrNanString[str] =  Field(\n    #     ..., description = \"Street Address of the home location of the respondent\"\n    # )\n    # \"\"\"\n    # Street Address of the home location of the respondent\n    # \"\"\"\n\n    age: NoneOrNan[e.Age] = Field(..., description=\"Age category of the respondent\")\n    \"\"\"\n    Age category of the respondent.\n    \"\"\"\n\n    gender: NoneOrNan[e.Gender] = Field(..., description=\"Gender of the respondent\")\n    \"\"\"\n    Gender of the respondent.\n    \"\"\"\n\n    gender_other: NoneOrNanString[str] = Field(\n        ..., description = \"Gender of the respondent (not listed)\"\n    )\n    \"\"\"\n    Gender of the respondent (not listed)\n    \"\"\"\n\n    race_aian: NoneOrNanString[bool] = Field(\n        ...,\n        description=\"Does the respondent identify as American Indian or Alaska Native?\",\n    )\n    \"\"\"\n    Does the respondent identify as American Indian or Alaska Native?\n    \"\"\"\n\n    race_asian:  NoneOrNanString[bool] = Field(..., description=\"Does the respondent identify as Asian?\")\n    \"\"\"\n    Does the respondent identify as Asian?\n    \"\"\"\n\n    race_black:  NoneOrNanString[bool] = Field(\n        ..., description=\"Does the respondent identify as Black or African American?\"\n    )\n    \"\"\"\n    Does the respondent identify as Black or African American?\n    \"\"\"\n\n    race_hispanic:  NoneOrNanString[bool] = Field(\n        ..., description=\"Does the respondent identify as Hispanic or Latino?\"\n    )\n    \"\"\"\n    Does the respondent identify as Hispanic or Latino?\n    \"\"\"\n\n    race_middle_eastern:  NoneOrNanString[bool] = Field(\n        ..., description=\"Does the respondent identify as Middle Eastern?\"\n    )\n    \"\"\"\n    Does the respondent identify as Middle Eastern?\n    \"\"\"\n\n    race_hp:  NoneOrNanString[bool] = Field(\n        ...,\n        description=\"Does the respondent identify as Native Hawaiian or Other Pacific Islander?\",\n    )\n    \"\"\"\n    Does the respondent identify as Native Hawaiian or Other Pacific Islander?\n    \"\"\"\n\n    race_white:  NoneOrNanString[bool] = Field(..., description=\"Does the respondent identify as White?\")\n    \"\"\"\n    Does the respondent identify as White?\n    \"\"\"\n\n    race_unknown:  NoneOrNanString[bool] = Field(\n        ..., description=\"Does the respondent identify as an unknown\"\n    )\n    \"\"\"\n    Does the respondent identify as an unknown race/ethnicity?\n    \"\"\"\n\n    race_other: NoneOrNanString[str] = Field(\n        ...,\n        description=\"If the respondent enters a race/ethnicicy not listed above, this field will be populated\",\n    )\n    \"\"\"\n    If the respondent enters a race/ethnicity not listed above, this field will be populated. \n    \"\"\"\n\n    race_list: NoneOrNanString[str] = Field(\n        ...,\n        description=\"List of Races the respondent identifies as (comma separated)\",\n    )\n    \"\"\"\n    List of Races the respondent identifies as (comma separated)\n    \"\"\"\n\n    number_persons_in_household: NoneOrNan[e.HouseholdSize] = Field(\n        ..., description=\"Number of persons in the respondent's household\"\n    )\n    \"\"\"\n    Number of persons in the respondent's household.\n    \"\"\"\n\n    number_vehicles: NoneOrNan[e.HouseholdVehicles] = Field(\n        ..., description=\"Number of vehicles in the respondent's household\"\n    )\n    \"\"\"\n    Number of vehicles in the respondent's household.\n    \"\"\"\n\n    household_income: NoneOrNan[e.HouseholdIncome] = Field(\n        ..., description=\"Income range of the respondent's household\"\n    )\n    \"\"\"\n    Income range of the respondent's household.\n    \"\"\"\n\n    is_income_below_poverty: NoneOrNanString[e.YesNoType] = Field(\n        ..., description=\"Is the respondent's household income below poverty?\",\n    )\n    \"\"\"\n    Is the respondent's household income below poverty?\n    \"\"\"\n\n    number_workers: NoneOrNan[e.HouseholdWorkers] = Field(\n        ..., description=\"Number of workers in the respondent's household\"\n    )\n    \"\"\"\n    Number of workers in the respondent's household.\n    \"\"\"\n\n    sp_invitation: NoneOrNanString[e.YesNoType] = Field(\n        ..., description = \"Whether the respondent chose to participate in the SP Survey\"\n    )\n\n    \"\"\"\n    Whether the respondent chose to participate in the SP Survey\n    \"\"\"\n\n    stay_informed: NoneOrNanString[e.YesNoType] = Field(\n        ..., description = \"Whether the respondent chose to Stay Informed about the project\"\n    )\n\n    \"\"\"\n    Whether the respondent chose to Stay Informed about the project\n    \"\"\"\n\n    survey_language: NoneOrNanString[e.SurveyLanguage] = Field(\n        ..., description = \"Language of the Survey\"\n    )\n    \"\"\"\n    Language of the Survey\n    \"\"\"\n\n    survey_language_other: NoneOrNanString[str] =  Field(\n        ..., description = \"Other (not listed) language of the survey\"\n    )\n    \"\"\"\n    Other (not listed) language of the survey\n    \"\"\"\n    ##Add SP Fields:\n\n    sp_feature_short_wait: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to having a short wait time (less than 10 minutes) for transit service.\"\n    )\n    \"\"\"Level of importance assigned to having a short wait time (less than 10 minutes) for transit service.\"\"\"\n\n    sp_feature_seats_transit_stop: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to the availability of seats at the transit stop.\"\n    )\n    \"\"\"Level of importance assigned to the availability of seats at the transit stop.\"\"\"\n\n    sp_feature_luggage_rack: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to having a luggage rack option on the transit service.\"\n    )\n    \"\"\"Level of importance assigned to having a luggage rack option on the transit service.\"\"\"\n\n    sp_feature_seats_transit: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to having available seating on the transit vehicle.\"\n    )\n    \"\"\"Level of importance assigned to having available seating on the transit vehicle.\"\"\"\n\n    sp_feature_no_delay: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to ensuring the transit service is not delayed by car traffic.\"\n    )\n    \"\"\"Level of importance assigned to ensuring the transit service is not delayed by car traffic.\"\"\"\n\n    sp_feature_early_morning: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to the service starting early in the morning (before 5 AM).\"\n    )\n    \"\"\"Level of importance assigned to the service starting early in the morning (before 5 AM).\"\"\"\n\n    sp_feature_late_night: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to the service operating past 10 PM.\"\n    )\n    \"\"\"Level of importance assigned to the service operating past 10 PM.\"\"\"\n\n    sp_feature_weekend_frequency: NoneOrNan[e.SPImportance] = Field(\n        ..., description=\"Level of importance assigned to frequent transit service availability on weekends.\"\n    )\n    \"\"\"Level of importance assigned to frequent transit service availability on weekends.\"\"\"\n\n    sp_access_walk_time: NoneOrNan[e.SPWillingToWalkTime] = Field(\n        ..., description=\"Maximum walking time (in minutes) the respondent is willing to take to access the transit station.\"\n    )\n    \"\"\"Maximum walking time (in minutes) the respondent is willing to take to access the transit station.\"\"\"\n\n    sp_number_of_transfers: NoneOrNan[e.SPNumTransfers] = Field(\n        ..., description=\"Number of transfers the respondent is willing to make to reach the airport.\"\n    )\n    \"\"\"Number of transfers the respondent is willing to make to reach the airport.\"\"\"\n\n    sp_dropoff_escort: NoneOrNan[e.SPDropoffType] = Field(\n        ..., description=\"Type of Person who dropped the respondent off at the airport.\"\n    )\n    \"\"\"Type of Person who dropped the respondent off at the airport.\"\"\"\n\n    sp_dropoff_choice_no_transit_access: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of being dropped off at the new transit station in areas without existing transit access.\"\n    )\n    \"\"\"Likelihood of being dropped off at the new transit station in areas without existing transit access.\"\"\"\n\n    sp_dropoff_choice_transit_access: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of being dropped off at a transit stop in areas with existing transit access.\"\n    )\n    \"\"\"Likelihood of being dropped off at a transit stop in areas with existing transit access.\"\"\"\n\n    sp_taxi_choice_dropoff_station: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of opting for drop-off at the new transit station when using a taxi.\"\n    )\n    \"\"\"Likelihood of opting for drop-off at the new transit station when using a taxi.\"\"\"\n\n    sp_rental_choice_no_transit: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of still renting a car if the new transit service were available.\"\n    )\n    \"\"\"Likelihood of still renting a car if the new transit service were available.\"\"\"\n\n    sp_connection_to_santafe_depot: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of using the new transit connection to the Santa Fe Depot train station.\"\n    )\n    \"\"\"Likelihood of using the new transit connection to the Santa Fe Depot train station.\"\"\"\n\n    sp_connection_to_convention_center: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of using the new transit connection to the San Diego Convention Center.\"\n    )\n    \"\"\"Likelihood of using the new transit connection to the San Diego Convention Center.\"\"\"\n\n    sp_connection_to_old_town_center: NoneOrNan[e.SPLikelihood] = Field(\n        ..., description=\"Likelihood of using the new transit connection to the Old Town Transit Center.\"\n    )\n    \"\"\"Likelihood of using the new transit connection to the Old Town Transit Center.\"\"\"\n\n     # Missing fields related to other airports\n    sp_other_airport_ease_of_planning: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent found trip planning easy at another airport's transit service.\"\n    )\n    \"\"\"True if the respondent found trip planning easy at another airport's transit service.\"\"\"\n\n    sp_other_airport_walking_distance: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the transit station at another airport was within a comfortable walking distance.\"\n    )\n    \"\"\"True if the transit station at another airport was within a comfortable walking distance.\"\"\"\n\n    sp_other_airport_short_travel_time: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent experienced a short total travel time at another airport.\"\n    )\n    \"\"\"True if the respondent experienced a short total travel time at another airport.\"\"\"\n\n    sp_other_airport_no_delays: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent experienced no delays using another airport's transit service.\"\n    )\n    \"\"\"True if the respondent experienced no delays using another airport's transit service.\"\"\"\n\n    sp_other_airport_cost: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the cost of using transit at another airport was a positive factor.\"\n    )\n    \"\"\"True if the cost of using transit at another airport was a positive factor.\"\"\"\n\n    sp_other_airport_frequency_of_service: NoneOrNanString[bool] = Field(   \n        ..., description=\"True if the frequency of service at another airport was a positive factor.\"\n    )\n    \"\"\"\n    True if the frequency of service at another airport was a positive factor.\n    \"\"\"\n\n    sp_other_airport_ease_of_boarding: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent found boarding easy at another airport's transit service.\"\n    )\n    \"\"\"True if the respondent found boarding easy at another airport's transit service.\"\"\"\n\n    sp_other_airport_comfort: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent found the transit service at another airport comfortable.\"\n    )\n    \"\"\"True if the respondent found the transit service at another airport comfortable.\"\"\"\n\n    sp_other_airport_safety: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent felt safe using another airport's transit service.\"\n    )\n    \"\"\"True if the respondent felt safe using another airport's transit service.\"\"\"\n\n    sp_other_airport_luggage_rack: NoneOrNanString[bool] = Field(\n        ..., description=\"True if a luggage rack was available at another airport's transit service.\"\n    )\n    \"\"\"True if a luggage rack was available at another airport's transit service.\"\"\"\n\n    sp_other_airport_enough_capacity: NoneOrNanString[bool] = Field(\n        ..., description=\"True if there was sufficient passenger capacity at another airport.\"\n    )\n    \"\"\"True if there was sufficient passenger capacity at another airport.\"\"\"\n\n    sp_other_airport_no_transfers: NoneOrNanString[bool] = Field(\n        ..., description=\"True if no transfers were required at another airport's transit service.\"\n    )\n    \"\"\"True if no transfers were required at another airport's transit service.\"\"\"\n\n    sp_other_airport_longer_operating_hours: NoneOrNanString[bool] = Field(\n        ..., description=\"True if another airport's transit service had longer operating hours.\"\n    )\n    \"\"\"True if another airport's transit service had longer operating hours.\"\"\"\n\n    sp_other_airport_enough_room_to_stand: NoneOrNanString[bool] = Field(\n        ..., description=\"True if there was enough standing room at another airport's transit service.\"\n    )\n    \"\"\"True if there was enough standing room at another airport's transit service.\"\"\"\n\n    sp_other_airport_enough_seats: NoneOrNanString[bool] = Field(\n        ..., description=\"True if there were enough available seats at another airport's transit service.\"\n    )\n    \"\"\"True if there were enough available seats at another airport's transit service.\"\"\"\n\n    sp_other_airport_other_specify: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent liked something else about another airport\u2019s transit service.\"\n    )\n    \"\"\"True if the respondent liked something else about another airport\u2019s transit service.\"\"\"\n\n    sp_other_airport_did_not_like: NoneOrNanString[bool] = Field(\n        ..., description=\"True if the respondent did not like the transit service at another airport.\"\n    )\n    \"\"\"True if the respondent did not like the transit service at another airport.\"\"\"\n\n\n    sp_other_airport_other: NoneOrNanString[str] = Field(\n        ..., description=\"Additional comments provided by the respondent regarding another airport's transit service.\"\n    )\n    \"\"\"Additional comments provided by the respondent regarding another airport's transit service.\"\"\"\n\n    sp_other_airport_list: NoneOrNanString[str] = Field(\n        ..., description=\"List of factors at other airports due to which the respondent used transit service.\"\n    )\n    \"\"\"\n    List of factors at other airports due to which the respondent used transit service.\n    \"\"\"\n\n    trip: Trip = Field(..., description=\"Details of the trip taken by the respondent\")\n    \"\"\"\n    Details of the trip taken by the respondent.\n    \"\"\"\n\n    @model_validator(mode=\"after\")\n    def prefer_not_disclose_is_unique(cls, values):\n        race_unknown = values.race_unknown\n        race_aian = values.race_aian\n        race_asian = values.race_asian\n        race_black = values.race_black\n        race_hispanic = values.race_hispanic\n        race_middle_eastern = values.race_middle_eastern\n        race_white = values.race_white\n        if race_unknown and (\n            race_aian\n            or race_asian\n            or race_black\n            or race_hispanic\n            or race_middle_eastern\n            or race_white\n        ):\n            #values.race_unknown = False\n            #values.valid_record= False\n            values.validation_error = \"Prefer Not to disclose cannot be combined with any other race\"\n            values.validation_severity = \"Low\"\n        return values\n</code></pre>"},{"location":"api.html#data_model.data_model.Respondent.age","title":"<code>age = Field(..., description='Age category of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Age category of the respondent.</p>"},{"location":"api.html#data_model.data_model.Respondent.date_completed","title":"<code>date_completed = Field(..., description='Date when respondent completed the survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Date when respondent completed the survey</p>"},{"location":"api.html#data_model.data_model.Respondent.gender","title":"<code>gender = Field(..., description='Gender of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Gender of the respondent.</p>"},{"location":"api.html#data_model.data_model.Respondent.gender_other","title":"<code>gender_other = Field(..., description='Gender of the respondent (not listed)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Gender of the respondent (not listed)</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_city","title":"<code>home_location_city = Field(..., description='City of the home location of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>City of the home location of the respondent</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_latitude","title":"<code>home_location_latitude = Field(..., description='Latitude of the home location of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Latitude of the home location of the respondent</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_longitude","title":"<code>home_location_longitude = Field(..., description='Longitude of the home location of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Longitude of the home location of the respondent</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_municipal_zone","title":"<code>home_location_municipal_zone = Field(..., description='Municipal zone of home address of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Municipal zone of home address of the Resident</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_pmsa","title":"<code>home_location_pmsa = Field(..., description='Pseudo MSA of home address of the Resident')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pseudo MSA of home address of the Resident</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_state","title":"<code>home_location_state = Field(..., description='State of the home location of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>State of the home location of the respondent</p>"},{"location":"api.html#data_model.data_model.Respondent.home_location_zip","title":"<code>home_location_zip = Field(..., description='ZIP of the home location of the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ZIP of the home location of the respondent</p>"},{"location":"api.html#data_model.data_model.Respondent.household_income","title":"<code>household_income = Field(..., description=\"Income range of the respondent's household\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Income range of the respondent\u2019s household.</p>"},{"location":"api.html#data_model.data_model.Respondent.initial_etc_check","title":"<code>initial_etc_check = Field(..., description=\"True if the record passed ETC's initial check\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the record is to be used for submittal</p>"},{"location":"api.html#data_model.data_model.Respondent.interview_location","title":"<code>interview_location = Field(..., description='Location where respondent was intercepted')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Location where respondent was intercepted.</p>"},{"location":"api.html#data_model.data_model.Respondent.interview_location_other","title":"<code>interview_location_other = Field(..., description='Other Location where respondent was intercepted')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Location where respondent was intercepted</p>"},{"location":"api.html#data_model.data_model.Respondent.is_completed","title":"<code>is_completed = Field(..., description='True if the record is complete')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the record is complete</p>"},{"location":"api.html#data_model.data_model.Respondent.is_income_below_poverty","title":"<code>is_income_below_poverty = Field(..., description=\"Is the respondent's household income below poverty?\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Is the respondent\u2019s household income below poverty?</p>"},{"location":"api.html#data_model.data_model.Respondent.is_pilot","title":"<code>is_pilot = Field(..., description='True if the record was collected during the pilot survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the record was collected during the pilot survey</p>"},{"location":"api.html#data_model.data_model.Respondent.is_qualified_age","title":"<code>is_qualified_age = Field(..., description='Whether the respondent is of a qualified age to participate in the survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the respondent is of a qualified age to participate in the survey.</p>"},{"location":"api.html#data_model.data_model.Respondent.is_self_administered","title":"<code>is_self_administered = Field(default=False, description='True if the survey was self-administered by the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the survey was self-administered by the respondent.</p>"},{"location":"api.html#data_model.data_model.Respondent.marketsegment","title":"<code>marketsegment = Field(..., description='Type of respondent, either passenger, employee, or other')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of respondent, either passenger, employee, or other.</p>"},{"location":"api.html#data_model.data_model.Respondent.number_persons_in_household","title":"<code>number_persons_in_household = Field(..., description=\"Number of persons in the respondent's household\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of persons in the respondent\u2019s household.</p>"},{"location":"api.html#data_model.data_model.Respondent.number_vehicles","title":"<code>number_vehicles = Field(..., description=\"Number of vehicles in the respondent's household\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of vehicles in the respondent\u2019s household.</p>"},{"location":"api.html#data_model.data_model.Respondent.number_workers","title":"<code>number_workers = Field(..., description=\"Number of workers in the respondent's household\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of workers in the respondent\u2019s household.</p>"},{"location":"api.html#data_model.data_model.Respondent.race_aian","title":"<code>race_aian = Field(..., description='Does the respondent identify as American Indian or Alaska Native?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as American Indian or Alaska Native?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_asian","title":"<code>race_asian = Field(..., description='Does the respondent identify as Asian?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as Asian?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_black","title":"<code>race_black = Field(..., description='Does the respondent identify as Black or African American?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as Black or African American?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_hispanic","title":"<code>race_hispanic = Field(..., description='Does the respondent identify as Hispanic or Latino?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as Hispanic or Latino?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_hp","title":"<code>race_hp = Field(..., description='Does the respondent identify as Native Hawaiian or Other Pacific Islander?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as Native Hawaiian or Other Pacific Islander?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_list","title":"<code>race_list = Field(..., description='List of Races the respondent identifies as (comma separated)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of Races the respondent identifies as (comma separated)</p>"},{"location":"api.html#data_model.data_model.Respondent.race_middle_eastern","title":"<code>race_middle_eastern = Field(..., description='Does the respondent identify as Middle Eastern?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as Middle Eastern?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_other","title":"<code>race_other = Field(..., description='If the respondent enters a race/ethnicicy not listed above, this field will be populated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If the respondent enters a race/ethnicity not listed above, this field will be populated.</p>"},{"location":"api.html#data_model.data_model.Respondent.race_unknown","title":"<code>race_unknown = Field(..., description='Does the respondent identify as an unknown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as an unknown race/ethnicity?</p>"},{"location":"api.html#data_model.data_model.Respondent.race_white","title":"<code>race_white = Field(..., description='Does the respondent identify as White?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Does the respondent identify as White?</p>"},{"location":"api.html#data_model.data_model.Respondent.record_type_synthetic","title":"<code>record_type_synthetic = Field(..., description='True if the record is synthetically generated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the record is synthetically generated</p>"},{"location":"api.html#data_model.data_model.Respondent.resident_visitor","title":"<code>resident_visitor = Field(..., description='Where the respondent resides in the airport service area most of the year')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Where the respondent resides in the airport service area most of the year.</p>"},{"location":"api.html#data_model.data_model.Respondent.respondentid","title":"<code>respondentid = Field(..., description='Unique identifier for the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Unique identifier for the respondent.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_access_walk_time","title":"<code>sp_access_walk_time = Field(..., description='Maximum walking time (in minutes) the respondent is willing to take to access the transit station.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum walking time (in minutes) the respondent is willing to take to access the transit station.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_connection_to_convention_center","title":"<code>sp_connection_to_convention_center = Field(..., description='Likelihood of using the new transit connection to the San Diego Convention Center.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of using the new transit connection to the San Diego Convention Center.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_connection_to_old_town_center","title":"<code>sp_connection_to_old_town_center = Field(..., description='Likelihood of using the new transit connection to the Old Town Transit Center.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of using the new transit connection to the Old Town Transit Center.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_connection_to_santafe_depot","title":"<code>sp_connection_to_santafe_depot = Field(..., description='Likelihood of using the new transit connection to the Santa Fe Depot train station.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of using the new transit connection to the Santa Fe Depot train station.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_dropoff_choice_no_transit_access","title":"<code>sp_dropoff_choice_no_transit_access = Field(..., description='Likelihood of being dropped off at the new transit station in areas without existing transit access.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of being dropped off at the new transit station in areas without existing transit access.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_dropoff_choice_transit_access","title":"<code>sp_dropoff_choice_transit_access = Field(..., description='Likelihood of being dropped off at a transit stop in areas with existing transit access.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of being dropped off at a transit stop in areas with existing transit access.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_dropoff_escort","title":"<code>sp_dropoff_escort = Field(..., description='Type of Person who dropped the respondent off at the airport.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of Person who dropped the respondent off at the airport.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_early_morning","title":"<code>sp_feature_early_morning = Field(..., description='Level of importance assigned to the service starting early in the morning (before 5 AM).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to the service starting early in the morning (before 5 AM).</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_late_night","title":"<code>sp_feature_late_night = Field(..., description='Level of importance assigned to the service operating past 10 PM.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to the service operating past 10 PM.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_luggage_rack","title":"<code>sp_feature_luggage_rack = Field(..., description='Level of importance assigned to having a luggage rack option on the transit service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to having a luggage rack option on the transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_no_delay","title":"<code>sp_feature_no_delay = Field(..., description='Level of importance assigned to ensuring the transit service is not delayed by car traffic.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to ensuring the transit service is not delayed by car traffic.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_seats_transit","title":"<code>sp_feature_seats_transit = Field(..., description='Level of importance assigned to having available seating on the transit vehicle.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to having available seating on the transit vehicle.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_seats_transit_stop","title":"<code>sp_feature_seats_transit_stop = Field(..., description='Level of importance assigned to the availability of seats at the transit stop.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to the availability of seats at the transit stop.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_short_wait","title":"<code>sp_feature_short_wait = Field(..., description='Level of importance assigned to having a short wait time (less than 10 minutes) for transit service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to having a short wait time (less than 10 minutes) for transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_feature_weekend_frequency","title":"<code>sp_feature_weekend_frequency = Field(..., description='Level of importance assigned to frequent transit service availability on weekends.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Level of importance assigned to frequent transit service availability on weekends.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_invitation","title":"<code>sp_invitation = Field(..., description='Whether the respondent chose to participate in the SP Survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the respondent chose to participate in the SP Survey</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_number_of_transfers","title":"<code>sp_number_of_transfers = Field(..., description='Number of transfers the respondent is willing to make to reach the airport.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of transfers the respondent is willing to make to reach the airport.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_comfort","title":"<code>sp_other_airport_comfort = Field(..., description='True if the respondent found the transit service at another airport comfortable.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent found the transit service at another airport comfortable.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_cost","title":"<code>sp_other_airport_cost = Field(..., description='True if the cost of using transit at another airport was a positive factor.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the cost of using transit at another airport was a positive factor.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_did_not_like","title":"<code>sp_other_airport_did_not_like = Field(..., description='True if the respondent did not like the transit service at another airport.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent did not like the transit service at another airport.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_ease_of_boarding","title":"<code>sp_other_airport_ease_of_boarding = Field(..., description=\"True if the respondent found boarding easy at another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent found boarding easy at another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_ease_of_planning","title":"<code>sp_other_airport_ease_of_planning = Field(..., description=\"True if the respondent found trip planning easy at another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent found trip planning easy at another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_enough_capacity","title":"<code>sp_other_airport_enough_capacity = Field(..., description='True if there was sufficient passenger capacity at another airport.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if there was sufficient passenger capacity at another airport.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_enough_room_to_stand","title":"<code>sp_other_airport_enough_room_to_stand = Field(..., description=\"True if there was enough standing room at another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if there was enough standing room at another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_enough_seats","title":"<code>sp_other_airport_enough_seats = Field(..., description=\"True if there were enough available seats at another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if there were enough available seats at another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_frequency_of_service","title":"<code>sp_other_airport_frequency_of_service = Field(..., description='True if the frequency of service at another airport was a positive factor.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the frequency of service at another airport was a positive factor.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_list","title":"<code>sp_other_airport_list = Field(..., description='List of factors at other airports due to which the respondent used transit service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of factors at other airports due to which the respondent used transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_longer_operating_hours","title":"<code>sp_other_airport_longer_operating_hours = Field(..., description=\"True if another airport's transit service had longer operating hours.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if another airport\u2019s transit service had longer operating hours.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_luggage_rack","title":"<code>sp_other_airport_luggage_rack = Field(..., description=\"True if a luggage rack was available at another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if a luggage rack was available at another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_no_delays","title":"<code>sp_other_airport_no_delays = Field(..., description=\"True if the respondent experienced no delays using another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent experienced no delays using another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_no_transfers","title":"<code>sp_other_airport_no_transfers = Field(..., description=\"True if no transfers were required at another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if no transfers were required at another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_other","title":"<code>sp_other_airport_other = Field(..., description=\"Additional comments provided by the respondent regarding another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional comments provided by the respondent regarding another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_other_specify","title":"<code>sp_other_airport_other_specify = Field(..., description='True if the respondent liked something else about another airport\u2019s transit service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent liked something else about another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_safety","title":"<code>sp_other_airport_safety = Field(..., description=\"True if the respondent felt safe using another airport's transit service.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent felt safe using another airport\u2019s transit service.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_short_travel_time","title":"<code>sp_other_airport_short_travel_time = Field(..., description='True if the respondent experienced a short total travel time at another airport.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the respondent experienced a short total travel time at another airport.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_other_airport_walking_distance","title":"<code>sp_other_airport_walking_distance = Field(..., description='True if the transit station at another airport was within a comfortable walking distance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if the transit station at another airport was within a comfortable walking distance.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_rental_choice_no_transit","title":"<code>sp_rental_choice_no_transit = Field(..., description='Likelihood of still renting a car if the new transit service were available.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of still renting a car if the new transit service were available.</p>"},{"location":"api.html#data_model.data_model.Respondent.sp_taxi_choice_dropoff_station","title":"<code>sp_taxi_choice_dropoff_station = Field(..., description='Likelihood of opting for drop-off at the new transit station when using a taxi.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Likelihood of opting for drop-off at the new transit station when using a taxi.</p>"},{"location":"api.html#data_model.data_model.Respondent.stay_informed","title":"<code>stay_informed = Field(..., description='Whether the respondent chose to Stay Informed about the project')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the respondent chose to Stay Informed about the project</p>"},{"location":"api.html#data_model.data_model.Respondent.survey_language","title":"<code>survey_language = Field(..., description='Language of the Survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Language of the Survey</p>"},{"location":"api.html#data_model.data_model.Respondent.survey_language_other","title":"<code>survey_language_other = Field(..., description='Other (not listed) language of the survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other (not listed) language of the survey</p>"},{"location":"api.html#data_model.data_model.Respondent.time_completed","title":"<code>time_completed = Field(..., description='Time when respondent completed the survey')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time when respondent completed the survey</p>"},{"location":"api.html#data_model.data_model.Respondent.trip","title":"<code>trip = Field(..., description='Details of the trip taken by the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Details of the trip taken by the respondent.</p>"},{"location":"api.html#data_model.data_model.Respondent.weight","title":"<code>weight = Field(..., description='Expansion Factor of the observation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Expansion Factor of the observation</p>"},{"location":"api.html#data_model.data_model.SkipLogicValidator","title":"<code>SkipLogicValidator</code>","text":"Source code in <code>data_model/data_model.py</code> <pre><code>class SkipLogicValidator:\n    def __init__(self, skip_logic_csv):\n        self.rules = pd.read_csv(skip_logic_csv)\n\n    def get_rules_for_class(self, class_name):\n        \"\"\"Filter skip logic rules for a specific class.\"\"\"\n        return self.rules[self.rules['class'] == class_name]\n\n    def validate(self, class_name, data):\n        \"\"\"Validate data using skip logic rules for a specific class.\"\"\"\n        errors = []\n        severity_levels = {\"Non-Critical\" : 0, \"Critical\": 0}  # Track severity levels\n\n        rules = self.get_rules_for_class(class_name)\n\n        for _, rule in rules.iterrows():\n            # Extract rule details\n            condition_variable = rule['condition_variable']\n            condition_values = str(rule['condition_value']).split(',')  # Ensure it's a string before splitting\n            check_type = rule['check_type']\n            check_variables = rule['check_variables'].split(',')\n            check_values = str(rule['check_values']).split(',') if pd.notna(rule['check_values']) else []\n            severity = rule['severity']\n\n            # Perform validation based on check_type\n            if check_type == \"critical\":\n                # Check fields directly for missing values\n                if self.perform_critical_check(data, check_variables):\n                    errors.append(f\"{', '.join(check_variables)}: {severity}\")\n                    severity_levels[severity] += 1\n\n            elif check_type == \"missing\":\n                # Conditional validation allowing multiple condition values\n                if condition_variable in data and str(data[condition_variable]) in condition_values:\n                    if not self.perform_check(data, check_type, check_variables, check_values):\n                        errors.append(f\"{', '.join(check_variables)}: {severity}\")\n                        severity_levels[severity] += 1\n\n            elif check_type == \"value\":\n                # Perform a value check even if no condition_variable is given\n                if not condition_variable or (condition_variable in data and str(data[condition_variable]) in condition_values):\n                    if not self.perform_check(data, check_type, check_variables, check_values):\n                        errors.append(f\"{', '.join(check_variables)}: {severity}\")\n                        severity_levels[severity] += 1\n\n        return errors, severity_levels, len(errors)\n\n    def perform_critical_check(self, data, check_variables):\n        \"\"\"\n        Check if any of the critical fields are missing.\n        Returns True if any field is missing, False otherwise.\n        \"\"\"\n        for var in check_variables:\n            if var not in data or data[var] is None:\n                # Log which variable failed the critical check\n                print(f\"Critical check failed for variable: {var}\")\n                return True  # A missing field causes the critical check to fail\n        return False  # All fields are present\n\n    def perform_check(self, data, check_type, check_variables, check_values):\n        \"\"\"Perform the validation check based on the check_type.\"\"\"\n        if check_type == \"missing\":\n            # Return False if any of the variables are missing\n            return all(var in data and data[var] is not None for var in check_variables)\n        elif check_type == \"value\":\n            # Return False if any of the variables do not match the expected values\n            return all(var in data and data[var] in check_values for var in check_variables)\n        return True\n</code></pre>"},{"location":"api.html#data_model.data_model.SkipLogicValidator.get_rules_for_class","title":"<code>get_rules_for_class(class_name)</code>","text":"<p>Filter skip logic rules for a specific class.</p> Source code in <code>data_model/data_model.py</code> <pre><code>def get_rules_for_class(self, class_name):\n    \"\"\"Filter skip logic rules for a specific class.\"\"\"\n    return self.rules[self.rules['class'] == class_name]\n</code></pre>"},{"location":"api.html#data_model.data_model.SkipLogicValidator.perform_check","title":"<code>perform_check(data, check_type, check_variables, check_values)</code>","text":"<p>Perform the validation check based on the check_type.</p> Source code in <code>data_model/data_model.py</code> <pre><code>def perform_check(self, data, check_type, check_variables, check_values):\n    \"\"\"Perform the validation check based on the check_type.\"\"\"\n    if check_type == \"missing\":\n        # Return False if any of the variables are missing\n        return all(var in data and data[var] is not None for var in check_variables)\n    elif check_type == \"value\":\n        # Return False if any of the variables do not match the expected values\n        return all(var in data and data[var] in check_values for var in check_variables)\n    return True\n</code></pre>"},{"location":"api.html#data_model.data_model.SkipLogicValidator.perform_critical_check","title":"<code>perform_critical_check(data, check_variables)</code>","text":"<p>Check if any of the critical fields are missing. Returns True if any field is missing, False otherwise.</p> Source code in <code>data_model/data_model.py</code> <pre><code>def perform_critical_check(self, data, check_variables):\n    \"\"\"\n    Check if any of the critical fields are missing.\n    Returns True if any field is missing, False otherwise.\n    \"\"\"\n    for var in check_variables:\n        if var not in data or data[var] is None:\n            # Log which variable failed the critical check\n            print(f\"Critical check failed for variable: {var}\")\n            return True  # A missing field causes the critical check to fail\n    return False  # All fields are present\n</code></pre>"},{"location":"api.html#data_model.data_model.SkipLogicValidator.validate","title":"<code>validate(class_name, data)</code>","text":"<p>Validate data using skip logic rules for a specific class.</p> Source code in <code>data_model/data_model.py</code> <pre><code>def validate(self, class_name, data):\n    \"\"\"Validate data using skip logic rules for a specific class.\"\"\"\n    errors = []\n    severity_levels = {\"Non-Critical\" : 0, \"Critical\": 0}  # Track severity levels\n\n    rules = self.get_rules_for_class(class_name)\n\n    for _, rule in rules.iterrows():\n        # Extract rule details\n        condition_variable = rule['condition_variable']\n        condition_values = str(rule['condition_value']).split(',')  # Ensure it's a string before splitting\n        check_type = rule['check_type']\n        check_variables = rule['check_variables'].split(',')\n        check_values = str(rule['check_values']).split(',') if pd.notna(rule['check_values']) else []\n        severity = rule['severity']\n\n        # Perform validation based on check_type\n        if check_type == \"critical\":\n            # Check fields directly for missing values\n            if self.perform_critical_check(data, check_variables):\n                errors.append(f\"{', '.join(check_variables)}: {severity}\")\n                severity_levels[severity] += 1\n\n        elif check_type == \"missing\":\n            # Conditional validation allowing multiple condition values\n            if condition_variable in data and str(data[condition_variable]) in condition_values:\n                if not self.perform_check(data, check_type, check_variables, check_values):\n                    errors.append(f\"{', '.join(check_variables)}: {severity}\")\n                    severity_levels[severity] += 1\n\n        elif check_type == \"value\":\n            # Perform a value check even if no condition_variable is given\n            if not condition_variable or (condition_variable in data and str(data[condition_variable]) in condition_values):\n                if not self.perform_check(data, check_type, check_variables, check_values):\n                    errors.append(f\"{', '.join(check_variables)}: {severity}\")\n                    severity_levels[severity] += 1\n\n    return errors, severity_levels, len(errors)\n</code></pre>"},{"location":"api.html#data_model.data_model.Trip","title":"<code>Trip</code>","text":"<p>               Bases: <code>PydanticModel</code></p> <p>Data model for a trip taken by a respondent.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class Trip(PydanticModel):\n    \"\"\"\n    Data model for a trip taken by a respondent.\n    \"\"\"\n\n    inbound_or_outbound: NoneOrNan[e.InboundOutbound] = Field(\n        ...,\n        description=\"Whether the trip is inbound to the airport or outbound from the airport\",\n    )\n    \"\"\"\n    Whether the trip is inbound to the airport or outbound from the airport.\n    \"\"\"\n\n    origin_activity_type: NoneOrNanString[e.ActivityType] = Field(\n        ..., description=\"Activity type at the origin of the trip to the airport\"\n    )\n    \"\"\"\n    Activity type at the origin of the trip to the airport.\n    \"\"\"\n\n    origin_activity_type_other: NoneOrNanString[str] = Field(\n        ..., description=\"Activity type at the origin of the trip to the airport\"\n    )\n    \"\"\"\n    Activity type at the origin of the trip to the airport.\n\n    \"\"\"\n    origin_name: NoneOrNanString[str] = Field(\n        ..., description=\"Place name of the origin of the trip to the airport\"\n    )\n    \"\"\"\n    Place name of the origin of the trip to the airport.\n    \"\"\"\n\n    origin_city: NoneOrNanString[str] = Field(\n        ..., description=\"City of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    City of the origin address for the trip to the airport.\n    \"\"\"\n\n    origin_state: NoneOrNanString[str] = Field(\n        ..., description=\"State of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    State of the origin address for the trip to the airport.\n    \"\"\"\n\n    origin_zip: NoneOrNanString[Union[str, int]] = Field(\n        ..., description=\"ZIP code of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    ZIP code of the origin address for the trip to the airport.\n    \"\"\"\n\n    origin_latitude: NoneOrNanString[Latitude] = Field(\n        ..., description=\"Latitude coordinate of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    Latitude coordinate of the origin address for the trip to the airport.\n    \"\"\"\n\n    origin_longitude: NoneOrNanString[Longitude] = Field(\n        ..., description=\"Longitude coordinate of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    Longitude coordinate of the origin address for the trip to the airport.\n    \"\"\"\n\n    origin_municipal_zone: NoneOrNanString[str] = Field(\n        ..., description=\"Municipal zone of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    Municipal zone of the origin address for the trip to the airport\n    \"\"\"\n\n    origin_pmsa: NoneOrNanString[e.PMSA] = Field(\n        ..., description=\"Pseudo MSA of the origin address for the trip to the airport\"\n    )\n    \"\"\"\n    Pseudo MSA of the origin address for the trip to the airport\n    \"\"\"\n\n    destination_activity_type: NoneOrNanString[e.ActivityType] = Field(\n        ...,\n        description=\"Activity type at the destination of the trip from the airport\",\n    )\n    \"\"\"\n    Activity type at the destination of the trip from the airport.\n    \"\"\"\n\n    destination_activity_type_other: NoneOrNanString[str] = Field(\n        ...,\n        description=\"Activity type (other) at the destination of the trip from the airport\",\n    )\n    \"\"\"\n    Activity type (other) at the destination of the trip from the airport.\n    \"\"\"\n\n    @computed_field(\n        return_type = e.ActivityType,\n        description=\"Activity type prior to traveling to the airport (for inbound) or activity traveling to do next (for outbound).\",\n    )\n    @property\n    def non_airport_activity_type(cls):\n        \"\"\"\n        Activity type prior to traveling to the airport (for inbound) or activity traveling to do next (for outbound).\n        \"\"\"\n        if cls.inbound_or_outbound == e.InboundOutbound.INBOUND_TO_AIRPORT:\n            return cls.origin_activity_type\n        return cls.destination_activity_type\n\n    destination_name: NoneOrNanString[str] = Field(\n    ..., description=\"Place name of the destination from the airport\"\n    )\n    \"\"\"\n    Place name of the destination from the airport.\n    \"\"\"\n\n    destination_city: NoneOrNanString[str] = Field(\n        ..., description=\"City of the destination address from the airport\"\n    )\n    \"\"\"\n    City of the destination address from the airport.\n    \"\"\"\n\n    destination_state: NoneOrNanString[str] = Field(\n        ..., description=\"State of the destination address from the airport\"\n    )\n    \"\"\"\n    State of the destination address from the airport.\n    \"\"\"\n\n    destination_zip: NoneOrNanString[Union[str, int]] = Field(\n        ..., description=\"ZIP code of the destination address from the airport\"\n    )\n    \"\"\"\n    ZIP code of the destination address from the airport.\n    \"\"\"\n\n    destination_latitude: NoneOrNanString[Latitude] = Field(\n        ..., description=\"Latitude coordinate of the destination address from the airport\"\n    )\n    \"\"\"\n    Latitude coordinate of the destination address from the airport.\n    \"\"\"\n\n    destination_longitude: NoneOrNanString[Longitude] = Field(\n        ..., description=\"Longitude coordinate of the destination address from the airport\"\n    )\n    \"\"\"\n    Longitude coordinate of the destination address from the airport.\n    \"\"\"\n\n    destination_municipal_zone: NoneOrNanString[str] = Field(\n        ..., description=\"Municipal zone of the destination address for the trip to the airport\"\n    )\n    \"\"\"\n    Municipal zone of the destination address for the trip to the airport\n    \"\"\"\n\n    destination_pmsa: NoneOrNanString[e.PMSA] = Field(\n        ..., description=\"Pseudo MSA of the destination address for the trip to the airport\"\n    )\n    \"\"\"\n    Pseudo MSA of the origin destination for the trip to the airport\n    \"\"\"\n\n    main_transit_mode: NoneOrNanString[e.TravelMode] = Field(\n        ..., description = \"Main Transit mode to/from airport\"\n    )\n    \"\"\"\n    Main Transit mode to/from airport.\n    \"\"\"\n\n    main_mode: NoneOrNanString[e.TravelMode] = Field(\n        ..., description = \"Main Mode to/from airport\"\n    )\n    \"\"\"\n    Main Mode to/from airport.\n    \"\"\"\n\n    main_mode_other: NoneOrNanString[str] = Field(\n        ..., description = \"Name of the other Main Mode to/from airport\"\n    )\n    \"\"\"\n    Name of the other Main Mode to/from airport.\n    \"\"\"\n\n    main_mode_grouped: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Grouped Main Mode to/from airport\")\n    \"\"\"\n    Grouped Main Mode to/from airport\n    \"\"\"\n\n    shared_van_other: NoneOrNanString[str] = Field(\n        ..., description = \"Name of the other shared van service used by respondent\"\n    )\n    \"\"\"\n    Name of the other shared van service used by respondent.\n    \"\"\"\n\n    number_transit_vehicles_to_airport: NoneOrNanString[e.NumTransfers] = Field(\n        ..., description = \"Number of transit transfers for the inbound trip to the airport\"\n    )\n    \"\"\"\n    Number of transit transfers for the inbound trip to the airport\n    \"\"\"\n\n    to_airport_transit_route_1: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the First Transit Route to the airport\"\n    )\n    \"\"\"\n    Name of the First Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_1_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other First Transit Route to the airport\"\n    )\n    \"\"\"\n    Other First Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_2: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the Second Transit Route to the airport\"\n    )\n    \"\"\"\n    Name of the Second Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_2_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other Second Transit Route to the airport\"\n    )\n    \"\"\"\n    Other Second Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_3: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the Third Transit Route to the airport\"\n    )\n    \"\"\"\n    Name of the Third Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_3_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other Third Transit Route to the airport\"\n    )\n    \"\"\"\n    Other Third Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_4: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the Fourth Transit Route to the airport\"\n    )\n    \"\"\"\n    Name of the Fourth Transit Route to the airport\n    \"\"\"\n\n    to_airport_transit_route_4_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other Fourth Transit Route to the airport\"\n    )\n    \"\"\"\n    Other Fourth Transit Route to the airport\n    \"\"\"\n\n    transit_routes_list: NoneOrNanString[str] = Field(\n        ..., description = \"List of transit routes used by the respondent (comma separated)\"\n    )\n    \"\"\"\n    List of transit routes used by the respondent (comma separated)\n    \"\"\"\n\n    num_transit_transfers: NoneOrNanString[int] = Field(\n        ..., description = \"Number of transit transfers made by the respondent\"\n    )\n    \"\"\"\n    Number of transit transfers made by the respondent.\n    \"\"\"\n\n    access_mode: NoneOrNanString[e.TravelMode] = Field(\n        ..., description = \"Access mode to first transit vehicle for inbound trip to the airport\"\n    )\n    \"\"\"\n    Access mode to first transit vehicle for inbound trip to the airport.\n    \"\"\"\n\n    access_mode_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other Access mode to first transit vehicle for inbound trip to the airport\"\n    )\n    \"\"\"\n    Other Access mode to first transit vehicle for inbound trip to the airport.\n    \"\"\"\n\n    access_mode_grouped: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Grouped Access mode to first transit vehicle for inbound trip to the airport\"\n    )\n    \"\"\"\n    Grouped Access mode to first transit vehicle for inbound trip to the airport.\n    \"\"\"\n\n    taxi_fhv_fare: NoneOrNanString[Union[str,float]] = Field(\n        ..., description = \"Taxi or for-hire vehicle fare\"\n    )\n    \"\"\"\n    Taxi or for-hire vehicle fare.\n    \"\"\"\n\n    taxi_fhv_wait: NoneOrNanString[Union[str,float]] = Field(\n        ..., description = \"Wait time for taxi or for-hire vehicle\"\n    )\n    \"\"\"\n    Wait time for taxi or for-hire vehicle.\n    \"\"\"\n\n    parking_location: NoneOrNanString[e.ParkingLocation] = Field(\n        ..., description = \"Name of respondent's parking location. \"\n    )\n    \"\"\"\n    Name of respondent's parking location. \n    \"\"\"\n\n    parking_location_other: NoneOrNanString[str] = Field(\n        ..., description = \"Name of respondent's (other) parking location. \"\n    )\n    \"\"\"\n    Name of respondent's (other) parking location. \n    \"\"\"\n\n    parking_cost: NoneOrNanString[Union[str,float]] = Field(\n        ..., description = \"Amount respondent paid to park\"\n    )\n    \"\"\"\n    Amount respondent paid to park.\n    \"\"\"\n\n    @computed_field(\n        return_type = float,\n        description = \"Numeric value of the taxi fare\",\n    )\n    @property\n    def taxi_fhv_fare_numeric(cls):\n        \"\"\"\n        Numeric Value of Taxi Fare\n        \"\"\"\n        if isinstance(cls.taxi_fhv_fare, str):\n            numeric_value = re.findall(r\"[-+]?\\d*\\.?\\d+|\\d+\", cls.taxi_fhv_fare)\n            return numeric_value[0] if numeric_value else None\n        return cls.taxi_fhv_fare\n\n    @computed_field(\n        return_type = float,\n        description = \"Numeric value of the taxi Wait Time\",\n    )\n    @property\n    def taxi_fhv_wait_numeric(cls):\n        \"\"\"\n        Numeric Value of Taxi Wait Time\n        \"\"\"\n        if isinstance(cls.taxi_fhv_wait, str):\n            numeric_value = re.findall(r\"[-+]?\\d*\\.?\\d+|\\d+\", cls.taxi_fhv_wait)\n            return numeric_value[0] if numeric_value else None\n        return cls.taxi_fhv_wait\n\n    @computed_field(\n        return_type = float,\n        description = \"Numeric value of parking cost\",\n    )\n    @property\n    def parking_cost_numeric(cls):\n        \"\"\"\n        Numeric Value of parking cost\n        \"\"\"\n        if isinstance(cls.parking_cost, str):\n            numeric_value = re.findall(r\"[-+]?\\d*\\.?\\d+|\\d+\", cls.parking_cost)\n            return numeric_value[0] if numeric_value else None\n        return cls.parking_cost\n\n\n    # @model_validator(mode=\"before\")\n    # def convert_datetime(cls, values):\n    #     # List of fields to validate\n    #     fields_to_check = ['taxi_fhv_fare', 'taxi_fhv_wait', 'parking_cost']\n\n    #     for field in fields_to_check:\n    #         value = values.get(field)\n    #         if isinstance(value, datetime):\n    #             # Option 1: Convert datetime to float (timestamp)\n    #             # values[field] = value.timestamp()\n\n    #             # Option 2: Convert datetime to a formatted string\n    #             values[field] = value.strftime('%Y-%m-%d %H:%M:%S')\n    #             values['valid_record'] = False\n    #             values['validation_severity'] = \"Low\"\n    #             values['validation_error'] = field + f\"{field} is datetime\"\n\n    #     return values\n\n\n    parking_cost_frequency: NoneOrNan[e.ParkingCostFrequency] = Field(\n        ..., description = \"Frequency of reported parking cost (e.g., one-time, per hour, per day, per month)\"\n    )\n    \"\"\"\n    Frequency of reported parking cost (e.g., one-time, per hour, per day, per month)\n    \"\"\"\n\n    parking_cost_frequency_other: NoneOrNanString[Union[str, int]] = Field(\n        ..., description = \"Other frequency of reported parking cost\"\n    )\n    \"\"\"\n    Other frequency of reported parking cost\n    \"\"\"\n\n    reimbursement: NoneOrNan[e.ParkingReimbursement] = Field(\n        ..., description = \"Whether or not ground access cost will be reimbursed by employer or other non-household member\"\n    )\n    \"\"\"\n    Whether or not ground access cost will be reimbursed by employer or other non-household member.\n    \"\"\"\n\n    number_transit_vehicles_from_airport: NoneOrNanString[e.NumTransfers] = Field(\n        ..., description = \"Number of transit transfers for the inbound trip\"\n    )\n    \"\"\"\n    Number of transit transfers for the inbound trip.\n    \"\"\"\n\n    from_airport_transit_route_1: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the First Transit Route from the airport\"\n    )\n    \"\"\"\n    Name of the First Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_1_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other First Transit Route from the airport\"\n    )\n    \"\"\"\n    Other First Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_2: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the Second Transit Route from the airport\"\n    )\n    \"\"\"\n    Name of the Second Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_2_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other Second Transit Route from the airport\"\n    )\n    \"\"\"\n    Other Second Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_3: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the Third Transit Route from the airport\"\n    )\n    \"\"\"\n    Name of the Third Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_3_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other Third Transit Route from the airport\"\n    )\n    \"\"\"\n    Other Third Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_4: NoneOrNanString[str] = Field(\n        ..., description=\"Name of the Fourth Transit Route from the airport\"\n    )\n    \"\"\"\n    Name of the Fourth Transit Route from the airport\n    \"\"\"\n\n    from_airport_transit_route_4_other: NoneOrNanString[str] = Field(\n        ..., description=\"Other Fourth Transit Route from the airport\"\n    )\n    \"\"\"\n    Other Fourth Transit Route from the airport\n    \"\"\"\n\n    egress_mode: NoneOrNanString[e.TravelMode] = Field(\n        ..., description = \"Egress mode from last transit vehicle for outbound trip\"\n    )\n    \"\"\"\n    Egress mode from last transit vehicle for outbound trip.\n    \"\"\"\n\n    egress_mode_other: NoneOrNanString[str] = Field(\n        ..., description = \"Other Egress mode from last transit vehicle for outbound trip\"\n    )\n    \"\"\"\n    Other Egress mode from last transit vehicle for outbound trip.\n    \"\"\"\n\n    egress_mode_grouped: NoneOrNanString[e.TravelModeGrouped] = Field(\n        ..., description = \"Grouped Egress mode from last transit vehicle for outbound trip\"\n    )\n    \"\"\"\n    Grouped Egress mode from last transit vehicle for outbound trip.\n    \"\"\"\n\n    transit_boarding_stop_name: NoneOrNanString[str] = Field(\n        ..., description = \"Name of the stop where respondent boarded the main transit mode\"\n    )\n    \"\"\"\n    Name of the stop where respondent boarded the main transit mode\n    \"\"\"\n\n    transit_boarding_latitude: NoneOrNanString[Latitude] = Field(\n        ..., description = \"Latitude of the stop where respondent boarded the main transit mode\"\n    )\n    \"\"\"\n    Latitude of the stop where respondent boarded the main transit mode\n    \"\"\"\n\n    transit_boarding_longitude: NoneOrNanString[Longitude] = Field(\n        ..., description = \"Longitude of the stop where respondent boarded the main transit mode\"\n    )\n    \"\"\"\n    Longitude of the stop where respondent boarded the main transit mode\n    \"\"\"\n\n    transit_alighting_stop_name: NoneOrNanString[str] = Field(\n        ..., description = \"Name of the stop where respondent got off the main transit mode\"\n    )\n    \"\"\"\n    Name of the stop where respondent got off the main transit mode\n    \"\"\"\n\n    transit_alighting_latitude: NoneOrNanString[Latitude] = Field(\n        ..., description = \"Latitude of the stop where respondent got off the main transit mode\"\n    )\n    \"\"\"\n    Latitude of the stop where respondent got off the main transit mode\n    \"\"\"\n\n    transit_alighting_longitude: NoneOrNanString[Longitude] = Field(\n        ..., description = \"Longitude of the stop where respondent got off the main transit mode\"\n    )\n    \"\"\"\n    Longitude of the stop where respondent boarded the main transit mode\n    \"\"\"\n\n\n    @model_validator(mode=\"after\")\n    def validate_record(cls, values):\n\n        errors, severity_levels, num_errors = skip_logic_validator.validate(\"Trip\", values.dict())\n        # Update validation fields\n        #values.valid_record = len(errors) == 0\n        values.validation_error = errors\n        values.validation_severity = cls.determine_severity(severity_levels)\n        values.validation_num_errors = num_errors\n\n        return values\n\n    @staticmethod\n    def determine_severity(severity_levels):\n        if severity_levels[\"Critical\"] &gt; 0:\n            return \"Critical\"\n        elif severity_levels[\"Non-Critical\"] &gt; 0:\n            return \"Non-Critical\"\n        return \"None\"\n    pass \n</code></pre>"},{"location":"api.html#data_model.data_model.Trip.access_mode","title":"<code>access_mode = Field(..., description='Access mode to first transit vehicle for inbound trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Access mode to first transit vehicle for inbound trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.access_mode_grouped","title":"<code>access_mode_grouped = Field(..., description='Grouped Access mode to first transit vehicle for inbound trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped Access mode to first transit vehicle for inbound trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.access_mode_other","title":"<code>access_mode_other = Field(..., description='Other Access mode to first transit vehicle for inbound trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Access mode to first transit vehicle for inbound trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_activity_type","title":"<code>destination_activity_type = Field(..., description='Activity type at the destination of the trip from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Activity type at the destination of the trip from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_activity_type_other","title":"<code>destination_activity_type_other = Field(..., description='Activity type (other) at the destination of the trip from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Activity type (other) at the destination of the trip from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_city","title":"<code>destination_city = Field(..., description='City of the destination address from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>City of the destination address from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_latitude","title":"<code>destination_latitude = Field(..., description='Latitude coordinate of the destination address from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Latitude coordinate of the destination address from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_longitude","title":"<code>destination_longitude = Field(..., description='Longitude coordinate of the destination address from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Longitude coordinate of the destination address from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_municipal_zone","title":"<code>destination_municipal_zone = Field(..., description='Municipal zone of the destination address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Municipal zone of the destination address for the trip to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.destination_name","title":"<code>destination_name = Field(..., description='Place name of the destination from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Place name of the destination from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_pmsa","title":"<code>destination_pmsa = Field(..., description='Pseudo MSA of the destination address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pseudo MSA of the origin destination for the trip to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.destination_state","title":"<code>destination_state = Field(..., description='State of the destination address from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>State of the destination address from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.destination_zip","title":"<code>destination_zip = Field(..., description='ZIP code of the destination address from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ZIP code of the destination address from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.egress_mode","title":"<code>egress_mode = Field(..., description='Egress mode from last transit vehicle for outbound trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Egress mode from last transit vehicle for outbound trip.</p>"},{"location":"api.html#data_model.data_model.Trip.egress_mode_grouped","title":"<code>egress_mode_grouped = Field(..., description='Grouped Egress mode from last transit vehicle for outbound trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped Egress mode from last transit vehicle for outbound trip.</p>"},{"location":"api.html#data_model.data_model.Trip.egress_mode_other","title":"<code>egress_mode_other = Field(..., description='Other Egress mode from last transit vehicle for outbound trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Egress mode from last transit vehicle for outbound trip.</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_1","title":"<code>from_airport_transit_route_1 = Field(..., description='Name of the First Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the First Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_1_other","title":"<code>from_airport_transit_route_1_other = Field(..., description='Other First Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other First Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_2","title":"<code>from_airport_transit_route_2 = Field(..., description='Name of the Second Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the Second Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_2_other","title":"<code>from_airport_transit_route_2_other = Field(..., description='Other Second Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Second Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_3","title":"<code>from_airport_transit_route_3 = Field(..., description='Name of the Third Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the Third Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_3_other","title":"<code>from_airport_transit_route_3_other = Field(..., description='Other Third Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Third Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_4","title":"<code>from_airport_transit_route_4 = Field(..., description='Name of the Fourth Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the Fourth Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.from_airport_transit_route_4_other","title":"<code>from_airport_transit_route_4_other = Field(..., description='Other Fourth Transit Route from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Fourth Transit Route from the airport</p>"},{"location":"api.html#data_model.data_model.Trip.inbound_or_outbound","title":"<code>inbound_or_outbound = Field(..., description='Whether the trip is inbound to the airport or outbound from the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the trip is inbound to the airport or outbound from the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.main_mode","title":"<code>main_mode = Field(..., description='Main Mode to/from airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Main Mode to/from airport.</p>"},{"location":"api.html#data_model.data_model.Trip.main_mode_grouped","title":"<code>main_mode_grouped = Field(..., description='Grouped Main Mode to/from airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grouped Main Mode to/from airport</p>"},{"location":"api.html#data_model.data_model.Trip.main_mode_other","title":"<code>main_mode_other = Field(..., description='Name of the other Main Mode to/from airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the other Main Mode to/from airport.</p>"},{"location":"api.html#data_model.data_model.Trip.main_transit_mode","title":"<code>main_transit_mode = Field(..., description='Main Transit mode to/from airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Main Transit mode to/from airport.</p>"},{"location":"api.html#data_model.data_model.Trip.non_airport_activity_type","title":"<code>non_airport_activity_type</code>  <code>property</code>","text":"<p>Activity type prior to traveling to the airport (for inbound) or activity traveling to do next (for outbound).</p>"},{"location":"api.html#data_model.data_model.Trip.num_transit_transfers","title":"<code>num_transit_transfers = Field(..., description='Number of transit transfers made by the respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of transit transfers made by the respondent.</p>"},{"location":"api.html#data_model.data_model.Trip.number_transit_vehicles_from_airport","title":"<code>number_transit_vehicles_from_airport = Field(..., description='Number of transit transfers for the inbound trip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of transit transfers for the inbound trip.</p>"},{"location":"api.html#data_model.data_model.Trip.number_transit_vehicles_to_airport","title":"<code>number_transit_vehicles_to_airport = Field(..., description='Number of transit transfers for the inbound trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of transit transfers for the inbound trip to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.origin_activity_type","title":"<code>origin_activity_type = Field(..., description='Activity type at the origin of the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Activity type at the origin of the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_activity_type_other","title":"<code>origin_activity_type_other = Field(..., description='Activity type at the origin of the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Activity type at the origin of the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_city","title":"<code>origin_city = Field(..., description='City of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>City of the origin address for the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_latitude","title":"<code>origin_latitude = Field(..., description='Latitude coordinate of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Latitude coordinate of the origin address for the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_longitude","title":"<code>origin_longitude = Field(..., description='Longitude coordinate of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Longitude coordinate of the origin address for the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_municipal_zone","title":"<code>origin_municipal_zone = Field(..., description='Municipal zone of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Municipal zone of the origin address for the trip to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.origin_name","title":"<code>origin_name = Field(..., description='Place name of the origin of the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Place name of the origin of the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_pmsa","title":"<code>origin_pmsa = Field(..., description='Pseudo MSA of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pseudo MSA of the origin address for the trip to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.origin_state","title":"<code>origin_state = Field(..., description='State of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>State of the origin address for the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.origin_zip","title":"<code>origin_zip = Field(..., description='ZIP code of the origin address for the trip to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ZIP code of the origin address for the trip to the airport.</p>"},{"location":"api.html#data_model.data_model.Trip.parking_cost","title":"<code>parking_cost = Field(..., description='Amount respondent paid to park')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Amount respondent paid to park.</p>"},{"location":"api.html#data_model.data_model.Trip.parking_cost_frequency","title":"<code>parking_cost_frequency = Field(..., description='Frequency of reported parking cost (e.g., one-time, per hour, per day, per month)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Frequency of reported parking cost (e.g., one-time, per hour, per day, per month)</p>"},{"location":"api.html#data_model.data_model.Trip.parking_cost_frequency_other","title":"<code>parking_cost_frequency_other = Field(..., description='Other frequency of reported parking cost')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other frequency of reported parking cost</p>"},{"location":"api.html#data_model.data_model.Trip.parking_cost_numeric","title":"<code>parking_cost_numeric</code>  <code>property</code>","text":"<p>Numeric Value of parking cost</p>"},{"location":"api.html#data_model.data_model.Trip.parking_location","title":"<code>parking_location = Field(..., description=\"Name of respondent's parking location. \")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of respondent\u2019s parking location.</p>"},{"location":"api.html#data_model.data_model.Trip.parking_location_other","title":"<code>parking_location_other = Field(..., description=\"Name of respondent's (other) parking location. \")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of respondent\u2019s (other) parking location.</p>"},{"location":"api.html#data_model.data_model.Trip.reimbursement","title":"<code>reimbursement = Field(..., description='Whether or not ground access cost will be reimbursed by employer or other non-household member')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether or not ground access cost will be reimbursed by employer or other non-household member.</p>"},{"location":"api.html#data_model.data_model.Trip.shared_van_other","title":"<code>shared_van_other = Field(..., description='Name of the other shared van service used by respondent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the other shared van service used by respondent.</p>"},{"location":"api.html#data_model.data_model.Trip.taxi_fhv_fare","title":"<code>taxi_fhv_fare = Field(..., description='Taxi or for-hire vehicle fare')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Taxi or for-hire vehicle fare.</p>"},{"location":"api.html#data_model.data_model.Trip.taxi_fhv_fare_numeric","title":"<code>taxi_fhv_fare_numeric</code>  <code>property</code>","text":"<p>Numeric Value of Taxi Fare</p>"},{"location":"api.html#data_model.data_model.Trip.taxi_fhv_wait","title":"<code>taxi_fhv_wait = Field(..., description='Wait time for taxi or for-hire vehicle')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Wait time for taxi or for-hire vehicle.</p>"},{"location":"api.html#data_model.data_model.Trip.taxi_fhv_wait_numeric","title":"<code>taxi_fhv_wait_numeric</code>  <code>property</code>","text":"<p>Numeric Value of Taxi Wait Time</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_1","title":"<code>to_airport_transit_route_1 = Field(..., description='Name of the First Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the First Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_1_other","title":"<code>to_airport_transit_route_1_other = Field(..., description='Other First Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other First Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_2","title":"<code>to_airport_transit_route_2 = Field(..., description='Name of the Second Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the Second Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_2_other","title":"<code>to_airport_transit_route_2_other = Field(..., description='Other Second Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Second Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_3","title":"<code>to_airport_transit_route_3 = Field(..., description='Name of the Third Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the Third Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_3_other","title":"<code>to_airport_transit_route_3_other = Field(..., description='Other Third Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Third Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_4","title":"<code>to_airport_transit_route_4 = Field(..., description='Name of the Fourth Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the Fourth Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.to_airport_transit_route_4_other","title":"<code>to_airport_transit_route_4_other = Field(..., description='Other Fourth Transit Route to the airport')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Other Fourth Transit Route to the airport</p>"},{"location":"api.html#data_model.data_model.Trip.transit_alighting_latitude","title":"<code>transit_alighting_latitude = Field(..., description='Latitude of the stop where respondent got off the main transit mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Latitude of the stop where respondent got off the main transit mode</p>"},{"location":"api.html#data_model.data_model.Trip.transit_alighting_longitude","title":"<code>transit_alighting_longitude = Field(..., description='Longitude of the stop where respondent got off the main transit mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Longitude of the stop where respondent boarded the main transit mode</p>"},{"location":"api.html#data_model.data_model.Trip.transit_alighting_stop_name","title":"<code>transit_alighting_stop_name = Field(..., description='Name of the stop where respondent got off the main transit mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the stop where respondent got off the main transit mode</p>"},{"location":"api.html#data_model.data_model.Trip.transit_boarding_latitude","title":"<code>transit_boarding_latitude = Field(..., description='Latitude of the stop where respondent boarded the main transit mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Latitude of the stop where respondent boarded the main transit mode</p>"},{"location":"api.html#data_model.data_model.Trip.transit_boarding_longitude","title":"<code>transit_boarding_longitude = Field(..., description='Longitude of the stop where respondent boarded the main transit mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Longitude of the stop where respondent boarded the main transit mode</p>"},{"location":"api.html#data_model.data_model.Trip.transit_boarding_stop_name","title":"<code>transit_boarding_stop_name = Field(..., description='Name of the stop where respondent boarded the main transit mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the stop where respondent boarded the main transit mode</p>"},{"location":"api.html#data_model.data_model.Trip.transit_routes_list","title":"<code>transit_routes_list = Field(..., description='List of transit routes used by the respondent (comma separated)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of transit routes used by the respondent (comma separated)</p>"},{"location":"api.html#data_model.data_model.Visitor","title":"<code>Visitor</code>","text":"<p>               Bases: <code>Respondent</code></p> <p>Data Model for a visitor of the San Deigo Region. It includes attributes specific to a Visitor.</p> Source code in <code>data_model/data_model.py</code> <pre><code>class Visitor(Respondent):\n    \"\"\"\n    Data Model for a visitor of the San Deigo Region. It includes attributes specific to a Visitor.\n    \"\"\"\n\n    convention_center: NoneOrNanString[e.YesNoType] = Field(\n        ..., description = \"Whether the visitor went/going to convention center\"\n    )\n    \"\"\"\n    Whether the visitor went/going to convention center.\n    \"\"\"\n\n    convention_center_activity: NoneOrNanString[e.ConventionCenterActivity] = Field(\n        ..., description = \"Type of activity that the respondent conducted at the convention center\"\n    )\n    \"\"\"\n    Type of activity that the respondent conducted at the convention center.\n    \"\"\"\n\n    convention_center_activity_other: NoneOrNanString[str] = Field(\n        ..., description = \"Type of activity (not listed) that the respondent conducted at the convention center\"\n    )\n    \"\"\"\n    Type of activity (not listed) that the respondent conducted at the convention center.\n    \"\"\"\n\n    nights_visited: NoneOrNan[e.TravelDuration] = Field(\n        ..., description = \"Number of nights the arriving air passengers will be in the San Diego Region\"\n    )\n    \"\"\"\n    Number of nights the arriving air passengers will be in the San Diego Region.\n    \"\"\"\n\n    general_use_transit_visitor_home: NoneOrNan[e.TransitUseFrequency] = Field(\n        ..., description = \"General transit use frequency by visitors of San Diego region when home\"\n    )\n    \"\"\"\n    General transit use frequency by visitors of San Diego region when home.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api.html#data_model.data_model.Visitor.convention_center","title":"<code>convention_center = Field(..., description='Whether the visitor went/going to convention center')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the visitor went/going to convention center.</p>"},{"location":"api.html#data_model.data_model.Visitor.convention_center_activity","title":"<code>convention_center_activity = Field(..., description='Type of activity that the respondent conducted at the convention center')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of activity that the respondent conducted at the convention center.</p>"},{"location":"api.html#data_model.data_model.Visitor.convention_center_activity_other","title":"<code>convention_center_activity_other = Field(..., description='Type of activity (not listed) that the respondent conducted at the convention center')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of activity (not listed) that the respondent conducted at the convention center.</p>"},{"location":"api.html#data_model.data_model.Visitor.general_use_transit_visitor_home","title":"<code>general_use_transit_visitor_home = Field(..., description='General transit use frequency by visitors of San Diego region when home')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>General transit use frequency by visitors of San Diego region when home.</p>"},{"location":"api.html#data_model.data_model.Visitor.nights_visited","title":"<code>nights_visited = Field(..., description='Number of nights the arriving air passengers will be in the San Diego Region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of nights the arriving air passengers will be in the San Diego Region.</p>"},{"location":"api.html#enums","title":"ENUMS","text":"<p>This section includes the various response options for survey variables</p>"},{"location":"api.html#data_model.enums.ActivityType","title":"<code>ActivityType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for activity types</p> Source code in <code>data_model/enums.py</code> <pre><code>class ActivityType(IntEnum):\n    \"\"\"\n    Integer mapping for activity types\n\n    \"\"\"\n    USUAL_WORKPLACE = 1\n    HOME = 2\n    HOTEL = 3\n    CONVENTION_CENTER = 4\n    OTHER_BUSINESS = 5\n    OTHER_RESIDENCE = 6 \n    SAN_DIEGO_AIRPORT = 7\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.Age","title":"<code>Age</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for age categories</p> Source code in <code>data_model/enums.py</code> <pre><code>class Age(IntEnum):\n    \"\"\"\n    Integer mapping for age categories\n    \"\"\"\n\n    AGE_18_19 = 1\n    AGE_20_24 = 2\n    AGE_25_29 = 3\n    AGE_30_34 = 4\n    AGE_35_39 = 5\n    AGE_40_44 = 6\n    AGE_45_49 = 7\n    AGE_50_54 = 8\n    AGE_55_59 = 9\n    AGE_60_64 = 10\n    AGE_65_74 = 11\n    AGE_75_OR_MORE = 12\n    PREFER_NOT_TO_SAY = 13\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.Airline","title":"<code>Airline</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for airlines at SAN</p> Source code in <code>data_model/enums.py</code> <pre><code>class Airline(IntEnum):\n    \"\"\"\n    Integer Mapping for airlines at SAN\n    \"\"\"\n    AIR_CANADA = 1\n    ALASKA_AIRLINES = 2\n    ALLEGIANT_AIR = 3\n    AMERICAN_AIRLINES = 4\n    BREEZE = 5\n    BRITISH_AIRWAYS = 6\n    DELTA_AIRLINES = 7\n    HAWAIIAN_AIRLINES = 8\n    JAPAN_AIRLINES = 9\n    JETBLUE = 10\n    LUFTHANSHA = 11\n    UNITED_AIRLINES = 12\n    WESTJET = 13\n    FRONTIER_AIRLINES = 14\n    SOUTHWEST_AIRLINES = 15\n    SPIRIT = 16\n    SUNCOUNTY_AIRLINES = 17\n    OTHER_SPECIFY = 98\n</code></pre>"},{"location":"api.html#data_model.enums.BusRoutes","title":"<code>BusRoutes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum Mappings for MTS Bus Routes</p> Source code in <code>data_model/enums.py</code> <pre><code>class BusRoutes(Enum):\n    \"\"\"\n    Enum Mappings for MTS Bus Routes\n    \"\"\"\n    MTS_4_12TH_IMPERIAL_TROLLEY_LOMITA_VILLAGE = \"MTS_1_4\"\n    MTS_AIR_OLD_TOWN_TO_AIRPORT_SHUTTLE = \"MTS_1_AIR\"\n    MTS_7_DOWNTOWN_SAN_DIEGO_UNIVERSITY_COLLEGE = \"MTS_1_7\"\n    MTS_41_FASHION_VALLEY_UCSD = \"MTS_1_41\"\n    MTS_964_MIRA_MESA_ALLIANT_UNIVERSITY_VIA_MCTS = \"MTS_1_964\"\n    MTS_8_OLD_TOWN_BALBOA_AV_TC = \"MTS_1_8\"\n    MTS_992_AIRPORT_DOWNTOWN_SHUTTLE = \"MTS_1_992\"\n    MTS_1_FASHION_VALLEY_LA_MESA = \"MTS_1_1\"\n    MTS_709_H_ST_TRANSIT_CENTER_OTAY_RANCH_TOWN_CENTER = \"MTS_1_709\"\n    MTS_901_IRIS_TRANSIT_CENTER_DOWNTOWN_SAN_DIEGO = \"MTS_1_901\"\n    MTS_BLUE_SAN_YSIDRO_UTC = \"MTS_1_Blue\"\n    MTS_5_DOWNTOWN_SAN_DIEGO_EUCLID_TRANSIT_CENTER = \"MTS_1_5\"\n    MTS_235_DOWNTOWN_ESCONDIDO_TRANSIT_CENTER = \"MTS_1_235\"\n    MTS_933_IRIS_TC_LOOP_IMPERIAL_BEACH_COUNTERCLOCK = \"MTS_1_933\"\n    MTS_88_OLD_TOWN_FASHION_VALLEY = \"MTS_1_88\"\n    OTHER = 98\n</code></pre>"},{"location":"api.html#data_model.enums.CarAvailability","title":"<code>CarAvailability</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for car availability</p> Source code in <code>data_model/enums.py</code> <pre><code>class CarAvailability(IntEnum):\n    \"\"\"\n    Integer mapping for car availability\n    \"\"\"\n\n    CAR_AVAILABLE = 1\n    DONT_HAVE_CAR = 2\n    CAR_UNAVAILABLE = 3\n    DONT_DRIVE = 4\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.CarryOns","title":"<code>CarryOns</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of carryon bags</p> Source code in <code>data_model/enums.py</code> <pre><code>class CarryOns(IntEnum):\n    \"\"\"\n    Integer mapping for number of carryon bags\n    \"\"\"\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT_OR_MORE = 8\n</code></pre>"},{"location":"api.html#data_model.enums.CheckedBags","title":"<code>CheckedBags</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of checked bags</p> Source code in <code>data_model/enums.py</code> <pre><code>class CheckedBags(IntEnum):\n    \"\"\"\n    Integer mapping for number of checked bags\n    \"\"\"\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT_OR_MORE = 8\n</code></pre>"},{"location":"api.html#data_model.enums.CommuteDays","title":"<code>CommuteDays</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of days employee commutes to SAN</p> Source code in <code>data_model/enums.py</code> <pre><code>class CommuteDays(IntEnum):\n    \"\"\"\n    Integer mapping for number of days employee commutes to SAN\n    \"\"\"\n    ZERO = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.ConventionCenterActivity","title":"<code>ConventionCenterActivity</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for convention center activities</p> Source code in <code>data_model/enums.py</code> <pre><code>class ConventionCenterActivity(IntEnum):\n    \"\"\"\n    Integer mapping for convention center activities\n    \"\"\"\n    ATTENDEE = 1\n    EXHIBITOR = 2\n    MEETING_PLANNER = 3\n    CONTRACTOR = 4\n    OTHER_SPECIFY = 98\n    NOT_APPLICABLE = 99\n</code></pre>"},{"location":"api.html#data_model.enums.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for all the countries in the world</p> Source code in <code>data_model/enums.py</code> <pre><code>class Country(IntEnum):\n    \"\"\"\n    Integer Mapping for all the countries in the world\n    \"\"\"\n    UNITED_STATES = 1\n    MEXICO = 2\n    AFGHANISTAN = 3\n    ALBANIA = 4\n    ALGERIA = 5\n    ANDORRA = 6\n    ANGOLA = 7\n    ANTIGUA_AND_BARBUDA = 8\n    ARGENTINA = 9\n    ARMENIA = 10\n    AUSTRALIA = 11\n    AUSTRIA = 12\n    AZERBAIJAN = 13\n    BAHAMAS = 14\n    BAHRAIN = 15\n    BANGLADESH = 16\n    BARBADOS = 17\n    BELARUS = 18\n    BELGIUM = 19\n    BELIZE = 20\n    BENIN = 21\n    BHUTAN = 22\n    BOLIVIA = 23\n    BOSNIA_AND_HERZEGOVINA = 24\n    BOTSWANA = 25\n    BRAZIL = 26\n    BRUNEI = 27\n    BULGARIA = 28\n    BURKINA_FASO = 29\n    BURUNDI = 30\n    COTE_DIVOIRE = 31\n    CABO_VERDE = 32\n    CAMBODIA = 33\n    CAMEROON = 34\n    CANADA = 35\n    CENTRAL_AFRICAN_REPUBLIC = 36\n    CHAD = 37\n    CHILE = 38\n    CHINA = 39\n    COLOMBIA = 40\n    COMOROS = 41\n    CONGO_CONGO_BRAZZAVILLE = 42\n    COSTA_RICA = 43\n    CROATIA = 44\n    CUBA = 45\n    CYPRUS = 46\n    CZECHIA_CZECH_REPUBLIC = 47\n    DEMOCRATIC_REPUBLIC_OF_THE_CONGO = 48\n    DENMARK = 49\n    DJIBOUTI = 50\n    DOMINICA = 51\n    DOMINICAN_REPUBLIC = 52\n    ECUADOR = 53\n    EGYPT = 54\n    EL_SALVADOR = 55\n    EQUATORIAL_GUINEA = 56\n    ERITREA = 57\n    ESTONIA = 58\n    ESWATINI_FMR_SWAZILAND = 59\n    ETHIOPIA = 60\n    FIJI = 61\n    FINLAND = 62\n    FRANCE = 63\n    GABON = 64\n    GAMBIA = 65\n    GEORGIA = 66\n    GERMANY = 67\n    GHANA = 68\n    GREECE = 69\n    GRENADA = 70\n    GUATEMALA = 71\n    GUINEA = 72\n    GUINEA_BISSAU = 73\n    GUYANA = 74\n    HAITI = 75\n    HOLY_SEE = 76\n    HONDURAS = 77\n    HUNGARY = 78\n    ICELAND = 79\n    INDIA = 80\n    INDONESIA = 81\n    IRAN = 82\n    IRAQ = 83\n    IRELAND = 84\n    ISRAEL = 85\n    ITALY = 86\n    JAMAICA = 87\n    JAPAN = 88\n    JORDAN = 89\n    KAZAKHSTAN = 90\n    KENYA = 91\n    KIRIBATI = 92\n    KUWAIT = 93\n    KYRGYZSTAN = 94\n    LAOS = 95\n    LATVIA = 96\n    LEBANON = 97\n    LESOTHO = 98\n    LIBERIA = 99\n    LIBYA = 100\n    LIECHTENSTEIN = 101\n    LITHUANIA = 102\n    LUXEMBOURG = 103\n    MADAGASCAR = 104\n    MALAWI = 105\n    MALAYSIA = 106\n    MALDIVES = 107\n    MALI = 108\n    MALTA = 109\n    MARSHALL_ISLANDS = 110\n    MAURITANIA = 111\n    MAURITIUS = 112\n    MICRONESIA = 113\n    MOLDOVA = 114\n    MONACO = 115\n    MONGOLIA = 116\n    MONTENEGRO = 117\n    MOROCCO = 118\n    MOZAMBIQUE = 119\n    MYANMAR_FORMERLY_BURMA = 120\n    NAMIBIA = 121\n    NAURU = 122\n    NEPAL = 123\n    NETHERLANDS = 124\n    NEW_ZEALAND = 125\n    NICARAGUA = 126\n    NIGER = 127\n    NIGERIA = 128\n    NORTH_KOREA = 129\n    NORTH_MACEDONIA = 130\n    NORWAY = 131\n    OMAN = 132\n    PAKISTAN = 133\n    PALAU = 134\n    PALESTINE_STATE = 135\n    PANAMA = 136\n    PAPUA_NEW_GUINEA = 137\n    PARAGUAY = 138\n    PERU = 139\n    PHILIPPINES = 140\n    POLAND = 141\n    PORTUGAL = 142\n    QATAR = 143\n    ROMANIA = 144\n    RUSSIA = 145\n    RWANDA = 146\n    SAINT_KITTS_AND_NEVIS = 147\n    SAINT_LUCIA = 148\n    SAINT_VINCENT_AND_THE_GRENADINES = 149\n    SAMOA = 150\n    SAN_MARINO = 151\n    SAO_TOME_AND_PRINCIPE = 152\n    SAUDI_ARABIA = 153\n    SENEGAL = 154\n    SERBIA = 155\n    SEYCHELLES = 156\n    SIERRA_LEONE = 157\n    SINGAPORE = 158\n    SLOVAKIA = 159\n    SLOVENIA = 160\n    SOLOMON_ISLANDS = 161\n    SOMALIA = 162\n    SOUTH_AFRICA = 163\n    SOUTH_KOREA = 164\n    SOUTH_SUDAN = 165\n    SPAIN = 166\n    SRI_LANKA = 167\n    SUDAN = 168\n    SURINAME = 169\n    SWEDEN = 170\n    SWITZERLAND = 171\n    SYRIA = 172\n    TAJIKISTAN = 173\n    TANZANIA = 174\n    THAILAND = 175\n    TIMOR_LESTE = 176\n    TOGO = 177\n    TONGA = 178\n    TRINIDAD_AND_TOBAGO = 179\n    TUNISIA = 180\n    TURKEY = 181\n    TURKMENISTAN = 182\n    TUVALU = 183\n    UGANDA = 184\n    UKRAINE = 185\n    UNITED_ARAB_EMIRATES = 186\n    UNITED_KINGDOM = 187\n    URUGUAY = 188\n    UZBEKISTAN = 189\n    VANUATU = 190\n    VENEZUELA = 191\n    VIETNAM = 192\n    YEMEN = 193\n    ZAMBIA = 194\n    ZIMBABWE = 195\n</code></pre>"},{"location":"api.html#data_model.enums.DepartTime","title":"<code>DepartTime</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for time categories</p> Source code in <code>data_model/enums.py</code> <pre><code>class DepartTime(IntEnum):  \n    \"\"\"\n    Integer mapping for time categories\n    \"\"\"\n\n    FIVE_TO_FIVE_THIRTY = 1\n    FIVE_THIRTY_TO_SIX = 2\n    SIX_TO_SIX_THIRTY = 3\n    SIX_THIRTY_TO_SEVEN = 4\n    SEVEN_TO_SEVEN_THIRTY = 5\n    SEVEN_THIRTY_TO_EIGHT = 6\n    EIGHT_TO_EIGHT_THIRTY = 7\n    EIGHT_THIRTY_TO_NINE = 8\n    NINE_TO_NINE_THIRTY = 9\n    NINE_THIRTY_TO_TEN = 10\n    TEN_TO_TEN_THIRTY = 11\n    TEN_THIRTY_TO_ELEVEN = 12\n    ELEVEN_TO_ELEVEN_THIRTY = 13\n    ELEVEN_THIRTY_TO_NOON = 14\n    NOON_TO_TWELVE_THIRTY = 15\n    TWELVE_THIRTY_TO_THIRTEEN = 16\n    THIRTEEN_TO_THIRTEEN_THIRTY = 17\n    THIRTEEN_THIRTY_TO_FOURTEEN = 18\n    FOURTEEN_TO_FOURTEEN_THIRTY = 19\n    FOURTEEN_THIRTY_TO_FIFTEEN = 20\n    FIFTEEN_TO_FIFTEEN_THIRTY = 21\n    FIFTEEN_THIRTY_TO_SIXTEEN = 22\n    SIXTEEN_TO_SIXTEEN_THIRTY = 23\n    SIXTEEN_THIRTY_TO_SEVENTEEN = 24\n    SEVENTEEN_TO_SEVENTEEN_THIRTY = 25\n    SEVENTEEN_THIRTY_TO_EIGHTEEN = 26\n    EIGHTEEN_TO_EIGHTEEN_THIRTY = 27\n    EIGHTEEN_THIRTY_TO_NINETEEN = 28\n    NINETEEN_TO_NINETEEN_THIRTY = 29\n    NINETEEN_THIRTY_TO_TWENTY = 30\n    TWENTY_TO_TWENTY_THIRTY = 31\n    TWENTY_THIRTY_TO_TWENTY_ONE = 32\n    TWENTY_ONE_TO_TWENTY_ONE_THIRTY = 33\n    TWENTY_ONE_THIRTY_TO_TWENTY_TWO = 34\n    TWENTY_TWO_TO_TWENTY_TWO_THIRTY = 35\n    TWENTY_TWO_THIRTY_TO_TWENTY_THREE = 36\n    TWENTY_THREE_TO_TWENTY_THREE_THIRTY = 37\n    TWENTY_THREE_THIRTY_TO_MIDNIGHT = 38\n    MIDNIGHT_TO_ZERO_THIRTY = 39\n    ZERO_THIRTY_TO_ONE = 40\n    ONE_TO_ONE_THIRTY = 41\n    ONE_THIRTY_TO_TWO = 42\n    TWO_TO_TWO_THIRTY = 43\n    TWO_THIRTY_TO_THREE = 44\n    THREE_TO_THREE_THIRTY = 45\n    THREE_THIRTY_TO_FOUR = 46\n    FOUR_TO_FOUR_THIRTY = 47\n    FOUR_THIRTY_TO_FIVE = 48\n</code></pre>"},{"location":"api.html#data_model.enums.Employers","title":"<code>Employers</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for employers</p> Source code in <code>data_model/enums.py</code> <pre><code>class Employers(IntEnum):\n    \"\"\"\n    Integer mapping for employers\n\n    \"\"\"\n    AIR_CANADA = 1\t\n    ALASKA_AIRLINES = 2\t\n    ALLEGIANT_AIR = 3\t\n    AMERICAN_AIRLINES = 4\t\n    ARTISAN_MARKET = 5\t\n    ASIAN_KITCHEN = 6\t\n    ASPIRE_LOUNGE = 7\t\n    BANKERS_HILL_BAR_AND_MARKET = 8\t\n    BAY_BOOKS_OF_CORONADO = 9\t\n    BE_RELAX_SPA = 10\t\n    BEAUDEVIN_VINE_AND_TAPAS_BAR = 11\t\n    BRITISH_AIRWAYS = 12\t\n    BROOKSTONE = 13\t\n    BUBBLES_SEAFOOD_AND_WINE_BAR = 14\t\n    CALIFORNIA_PIZZA_KITCHEN = 15\t\n    CAMDEN_FOOD_CO = 16\t\n    CIAO_GOURMET_MARKET = 17\t\n    CNBC_EXPRESS = 18\t\n    CNBC_NEWS_SAN_DIEGO = 19\t\n    DARK_HORSE_COFFEE_ROASTERS = 20\t\n    DELTA_AIRLINES = 21\t\n    DELTA_SKY_CLUB = 22\t\n    DISCOVER_SAN_DIEGO = 23\t\n    EINSTEIN_BROS_BAGELS = 24\t\n    ELEGANT_DESSERTS = 25\t\n    FRONTIER_AIRLINES = 26\t\n    GASLAMP_MARKETPLACE = 27\t\n    HAWAIIAN_AIRLINES = 28\t\n    HUDSON_NEWS = 29\t\n    INMOTION_ENTERTAINMENT = 30\t\n    JACK_IN_THE_BOX = 31\t\n    JAPAN_AIRLINES = 32\t\n    JETBLUE = 33\t\n    JETBOX = 34\t\n    JETBOX_MARKET = 35\t\n    KUSI_NEWS = 36\t\n    LINDBERGH_FIELD_NEWS = 37\t\n    LUFTHANSA = 38\t\n    OLD_TOWN_NEWS_AND_MARKET = 39\t\n    PACIFICA_BREEZE_CAFE = 40\t\n    PANDA_EXPRESS = 41\t\n    PANNIKIN_COFFEE_AND_TEA = 42\t\n    PEETS_COFFEE_AND_TEA = 43\t\n    PGA_TOUR_GRILL = 44\t\n    PGA_TOUR_SHOP = 45\t\n    PHILS_BBQ = 46\t\n    PRADO_AT_THE_AIRPORT = 47\t\n    QDOBA_MEXICAN_GRILL = 48\t\n    RED_MANGO = 49\t\n    RIP_CURL = 50\t\n    SAN_LIFE_MARKET = 51\t\n    SAND_NEWS = 52\t\n    SKY_FREE_SHOP = 53\t\n    SOUNDBALANCE = 54\t\n    SOUTHWEST_AIRLINES = 55\t\n    SPIRIT = 56\t\n    STARBUCKS = 57\t\n    STELLAR_NEWS_EXPRESS = 58\t\n    STONE_BREWING_COMPANY = 59\t\n    SUNCOUNTY_AIRLINES = 60\t\n    SUNGLASS_HUT = 61\t\n    SWAROVSKI = 62\t\n    TECH_ON_THE_GO = 63\t\n    THE_BEACH_HOUSE = 64\t\n    THE_COUNTER_CUSTOM_BUILT_BURGERS = 65\t\n    TOMMY_VS_PIZZERIA = 66\t\n    TRANSPORTATION_SECURITY_ADMINISTRATION_TSA = 67\t\n    UNITED_AIRLINES = 68\t\n    UNITED_CLUB = 69\t\n    UNITED_SERVICE_ORGANIZATIONS = 70\t\n    URBAN_CRAVE = 71\t\n    US_CUSTOMS_AND_BORDER_PROTECTION = 72\t\n    US_NEWS_AND_WORLD_REPORT = 73\t\n    WARWICKS_OF_LA_JOLLA = 74\t\n    WESTJET = 75\n    SDCRAA_SDIA = 76\n    FLAGSHIP = 77\t\n    HMS_HOST = 78\n    OTHER_SPECIFY = 98\t\n</code></pre>"},{"location":"api.html#data_model.enums.FlightPurpose","title":"<code>FlightPurpose</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for Flight Purposes</p> Source code in <code>data_model/enums.py</code> <pre><code>class FlightPurpose(IntEnum):\n    \"\"\"\n    Integer Mapping for Flight Purposes\n    \"\"\"\n    BUSINESS_WORK = 1\n    LEISURE_FAMILY = 2\n    COMBINATION_BUSINESS_LEISURE = 3\n    PERSONAL = 4\n    SCHOOL = 5\n    COMMUTE = 6\n    OTHER_SPECIFY = 98\n</code></pre>"},{"location":"api.html#data_model.enums.Gender","title":"<code>Gender</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for gender</p> Source code in <code>data_model/enums.py</code> <pre><code>class Gender(IntEnum):\n    \"\"\"\n    Integer mapping for gender\n    \"\"\"\n    MALE = 1\n    FEMALE = 2\n    TRANSGENDER = 3\n    NON_BINARY_THIRD_GENDER = 4\n    PREFER_NOT_TO_SAY = 5\n    OTHER_SPECIFY = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.HoursWorked","title":"<code>HoursWorked</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of hours employee works at SAN</p> Source code in <code>data_model/enums.py</code> <pre><code>class HoursWorked(IntEnum):\n    \"\"\"\n    Integer mapping for number of hours employee works at SAN\n    \"\"\"\n\n    ZERO = 1\n    ONE_TO_TEN = 2\n    ELEVEN_TO_TWENTY = 3\n    TWENTY_ONE_TO_THIRTY = 4\n    THIRTY_ONE_TO_FORTY = 5\n    FORTY_ONE_TO_FIFTY = 6\n    FIFTY_ONE_TO_SIXTY = 7\n    SIXTY_ONE_TO_SEVENTY = 8\n    SEVENTY_ONE_TO_EIGHTY = 9\n    MORE_THAN_EIGHTY = 10\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.HouseholdIncome","title":"<code>HouseholdIncome</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for household income ranges</p> Source code in <code>data_model/enums.py</code> <pre><code>class HouseholdIncome(IntEnum):\n    \"\"\"\n    Integer mapping for household income ranges\n    \"\"\"\n\n    LESS_THAN_15K = 1\n    BETWEEN_15K_20K = 2\n    BETWEEN_20K_25K = 3\n    BETWEEN_25K_30K = 4\n    BETWEEN_30K_35K = 5\n    BETWEEN_35K_40K = 6\n    BETWEEN_40K_45K = 7\n    BETWEEN_45K_50K = 8\n    BETWEEN_50K_60K = 9\n    BETWEEN_60K_75K = 10\n    BETWEEN_75K_100K = 11\n    BETWEEN_100K_150K = 12\n    BETWEEN_150_199K = 13\n    PREFER_NOT_TO_SAY = 14  \n    BETWEEN_200_299K = 15\n    MORE_THAN_300K = 16\n    MORE_THAN_150K = 17\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.HouseholdSize","title":"<code>HouseholdSize</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of persons in household</p> Source code in <code>data_model/enums.py</code> <pre><code>class HouseholdSize(IntEnum):\n    \"\"\"\n    Integer mapping for number of persons in household\n    \"\"\"\n\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT = 8\n    NINE = 9\n    TEN_OR_MORE = 10\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.HouseholdVehicles","title":"<code>HouseholdVehicles</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of vehicles in household</p> Source code in <code>data_model/enums.py</code> <pre><code>class HouseholdVehicles(IntEnum):\n    \"\"\"\n    Integer mapping for number of vehicles in household\n    \"\"\"\n\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT_OR_MORE = 8\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.HouseholdWorkers","title":"<code>HouseholdWorkers</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of workers in household</p> Source code in <code>data_model/enums.py</code> <pre><code>class HouseholdWorkers(IntEnum):\n    \"\"\"\n    Integer mapping for number of workers in household\n    \"\"\"\n\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT = 8\n    NINE = 9\n    TEN_OR_MORE = 10\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.InboundOutbound","title":"<code>InboundOutbound</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for inbound and outbound flights</p> Source code in <code>data_model/enums.py</code> <pre><code>class InboundOutbound(IntEnum):\n    \"\"\"\n    Integer mapping for inbound and outbound flights\n    \"\"\"\n\n    INBOUND_TO_AIRPORT = 1\n    OUTBOUND_FROM_AIRPORT = 2\n</code></pre>"},{"location":"api.html#data_model.enums.InterviewLocation","title":"<code>InterviewLocation</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for interview locations</p> Source code in <code>data_model/enums.py</code> <pre><code>class InterviewLocation(IntEnum):\n    \"\"\"\n    Integer Mapping for interview locations\n    \"\"\"\n    TERMINAL_1 = 1\n    TERMINAL_2 = 2\n    ONBOARD_992 = 3\n    ONBOARD_FLYER = 4\n    RENTAL_CENTER = 5\n    PASSENGER_PARKING = 6\n    EMPLOYEE_PARKING = 7\n    OTHER_SPECIFY = 98\n</code></pre>"},{"location":"api.html#data_model.enums.ModeDecision","title":"<code>ModeDecision</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for decisions to choose a commute mode</p> Source code in <code>data_model/enums.py</code> <pre><code>class ModeDecision(IntEnum):\n    \"\"\"\n    Integer mapping for decisions to choose a commute mode\n    \"\"\"\n    LOWEST_COST = 1\n    SHORTEST_DOOR_TO_DOOR_TRAVEL_TIME = 2\n    SMALLEST_CHANCE_FOR_DELAYS = 3\n    MOST_COMFORTABLE = 4\n    LEAST_WALKING = 5\n    DEPENDS_ON_TIME_OF_DAY = 6\n    DEPENDS_ON_TRAVEL_PARTY = 7\n    DEPENDS_ON_WHO_PAYS = 8\n    OTHER_SPECIFY = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.NumTransfers","title":"<code>NumTransfers</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of transfers</p> Source code in <code>data_model/enums.py</code> <pre><code>class NumTransfers(IntEnum): \n    \"\"\"\n    Integer mapping for number of transfers\n    \"\"\"\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR_OR_MORE = 4 \n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.OccupationDetail","title":"<code>OccupationDetail</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for the occupation details for an airport employee</p> Source code in <code>data_model/enums.py</code> <pre><code>class OccupationDetail(IntEnum):\n    \"\"\"\n    Integer mapping for the occupation details for an airport employee\n    \"\"\"\n    WORK_NEAR_PASSENGERS = 1\n    WORK_IN_OFFICE = 2\n    WORK_ELSEWHERE = 3\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.Occupations","title":"<code>Occupations</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for occupations</p> Source code in <code>data_model/enums.py</code> <pre><code>class Occupations(IntEnum):\n    \"\"\"\n    Integer mapping for occupations\n\n    \"\"\"\n\n    AIRCRAFT_MECHANIC = 1\n    PILOT = 2\n    AIRCRAFT_SVC_ATTENDANT = 3\n    AIR_TRAFFIC_CONTROLLER = 4\n    FLIGHT_ATTENDANT = 5\n    TICKET_AGENT = 6\n    CARGO_AGENT = 7\n    CARGO_HANDLER = 8\n    BLDG_MAINTENANCE_CLEANING = 9\n    PARKING_ATTENDANT = 10\n    DRIVER = 11\n    TSA = 12\n    LAW_ENFORCEMENT = 13\n    GENERAL_AND_OPERATIONS_MANAGERS = 14\n    PROGRAM_AND_PROJECT_MANAGERS = 15\n    RETAIL_RESTAURANT = 16\n    CONSTRUCTION = 17\n    OTHER_LABORERS = 18\n    OTHER_CUSTOMER_SUPPORT = 19\n    OTHER_ADMIN_SUPPORT = 20\n    OTHER_SPECIFY = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.OtherFlightAndTransitUseFrequency","title":"<code>OtherFlightAndTransitUseFrequency</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for other aiport\u2019s flight and transit use frequency</p> Source code in <code>data_model/enums.py</code> <pre><code>class OtherFlightAndTransitUseFrequency(IntEnum):\n    \"\"\"\n    Integer Mapping for other aiport's flight and transit use frequency\n    \"\"\"\n    NONE = 0\n    ONE_TIME = 1\n    TWO_TIMES = 2\n    THREE_TIMES = 3\n    FOUR_TIMES = 4\n    MORE_THAN_FIVE_TIMES = 5\n    NEVER = 6\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.PMSA","title":"<code>PMSA</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for Pseudo Metropolitan Statistical Areas</p> Source code in <code>data_model/enums.py</code> <pre><code>class PMSA(IntEnum):\n    \"\"\"\n    Integer Mapping for Pseudo Metropolitan Statistical Areas\n    \"\"\"\n    DOWNTOWN = 1\n    CENTRAL = 2\n    NORTH_CITY = 3\n    SOUTH_SUBURBAN = 4\n    EAST_SUBURBAN = 5\n    NORTH_COUNTY_WEST = 6\n    NORTH_COUNTY_EAST = 7\n    EAST_COUNTY = 8\n    EXTERNAL = 99\n</code></pre>"},{"location":"api.html#data_model.enums.ParkingCostFrequency","title":"<code>ParkingCostFrequency</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for parking cost frequencies</p> Source code in <code>data_model/enums.py</code> <pre><code>class ParkingCostFrequency(IntEnum):\n    \"\"\"\n    Integer mapping for parking cost frequencies\n    \"\"\"\n    TOTAL = 1\n    MONTHLY = 2\n    DAILY = 3\n    HOURLY = 4\n    OTHER_SPECIFY = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.ParkingLocation","title":"<code>ParkingLocation</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for Airport parking locations</p> Source code in <code>data_model/enums.py</code> <pre><code>class ParkingLocation(IntEnum):\n    \"\"\"\n    Integer Mapping for Airport parking locations\n    \"\"\"\n    TERM1_PARKING_PLAZA = 1\n    TERM2_PARKING_PLAZA = 2\n    TERM1_CURBSIDE_VALET = 3\n    TERM2_CURBSIDE_VALET = 4\n    OFF_AIRPORT_PARKING = 5\n    EMPLOYEE_LOT_3665_ADMIRAL_BOLAND_WAY = 6\n    ADMIN_BUILDING_LOT_2417_MCCAIN_ROAD = 7\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.ParkingReimbursement","title":"<code>ParkingReimbursement</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for Parking Reimbursement Status</p> Source code in <code>data_model/enums.py</code> <pre><code>class ParkingReimbursement(IntEnum):\n    \"\"\"\n    Integer mapping for Parking Reimbursement Status\n    \"\"\"\n    REIMBURSED_EMPLOYER_CLIENT = 1\n    REIMBURSED_OTHER_THIRD_PARTY = 2\n    NOT_REIMBURSED = 3\n    DONT_KNOW = 4\n</code></pre>"},{"location":"api.html#data_model.enums.PartySize","title":"<code>PartySize</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for number of persons in travel party (apart from respondent)</p> Source code in <code>data_model/enums.py</code> <pre><code>class PartySize(IntEnum):\n    \"\"\"\n    Integer mapping for number of persons in travel party (apart from respondent)\n    \"\"\"\n    NONE = 0\n    ONE = 1  \n    TWO = 2\n    THREE = 3\n    FOUR = 4    \n    FIVE = 5\n    SIX = 6\n    SEVEN_OR_MORE = 7\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.PassengerSegment","title":"<code>PassengerSegment</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for type of passenger segment</p> Source code in <code>data_model/enums.py</code> <pre><code>class PassengerSegment(IntEnum):\n    \"\"\"\n    Integer Mapping for type of passenger segment\n    \"\"\"\n    RESIDENT_ARRIVING = 1\n    RESIDENT_DEPARTING = 2\n    VISITOR_ARRIVING = 3\n    VISITOR_DEPARTING = 4\n</code></pre>"},{"location":"api.html#data_model.enums.PassengerType","title":"<code>PassengerType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for type of passenger</p> Source code in <code>data_model/enums.py</code> <pre><code>class PassengerType(IntEnum):\n    \"\"\"\n    Integer Mapping for type of passenger\n    \"\"\"\n\n    ARRIVING = 1\n    DEPARTING = 2\n    CONNECTING = 3\n</code></pre>"},{"location":"api.html#data_model.enums.ReasonsNoTransit","title":"<code>ReasonsNoTransit</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for reasons of not choosing transit</p> Source code in <code>data_model/enums.py</code> <pre><code>class ReasonsNoTransit(IntEnum):\n    \"\"\"\n    Integer mapping for reasons of not choosing transit\n    \"\"\"\n    NOT_CONVENIENT = 1\n    DISLIKE_CROWDED_TRAINS_BUSES = 2\n    NOT_FLEXIBLE = 3\n    NOT_RELIABLE = 4\n    NOT_SAFE = 5\n    TAKES_TOO_LONG = 6\n    NOT_ECONOMICAL = 7\n    DONT_KNOW_HOW = 8\n    TOO_MUCH_WALKING_STAIRS = 9\n    NO_GOOD_OPTIONS = 10\n    DISLIKE_PUBLIC_TRANSPORT = 11\n    DISLIKE_PUBLIC_TRANSPORT_WITH_LUGGAGE = 12\n    OTHER_SPECIFY = 98\n</code></pre>"},{"location":"api.html#data_model.enums.ResidentVisitor","title":"<code>ResidentVisitor</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for Residence Zones</p> Source code in <code>data_model/enums.py</code> <pre><code>class ResidentVisitor(IntEnum):\n    \"\"\"\n    Integer Mapping for Residence Zones\n    \"\"\"\n    SAN_DIEGO_REGION = 1\n    OTHER_SOUTHERN_CALIFORNIA = 2\n    OTHER_CALIFORNIA = 3\n    TIJUANA_REGION = 4\n    OTHER_BAJA_CALIFORNIA = 5\n    OTHER_STATE_US = 6\n    OTHER_STATE_MEXICO = 7\n    NONE_OF_THE_ABOVE = 8\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.ResidentVisitorFollowup","title":"<code>ResidentVisitorFollowup</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for the followup question to respondent if they are neither a visitor nor a resident - if they are visiting SAN Diego</p> Source code in <code>data_model/enums.py</code> <pre><code>class ResidentVisitorFollowup(IntEnum):\n    \"\"\"\n    Integer Mapping for the followup question to respondent if they are neither a visitor nor a resident - if they are visiting SAN Diego\n    \"\"\"\n    VISITING_THE_REGION = 1\n    LIVE_OUTSIDE_REGION_TRAVELED_TO_AIRPORT = 2\n</code></pre>"},{"location":"api.html#data_model.enums.ResidentVisitorGeneral","title":"<code>ResidentVisitorGeneral</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for the respondent if they are resident, visitor or neither. First option if departing, second if arriving</p> Source code in <code>data_model/enums.py</code> <pre><code>class ResidentVisitorGeneral(IntEnum):\n    \"\"\"\n    Integer Mapping for the respondent if they are resident, visitor or neither. First option if departing, second if arriving\n    \"\"\"\n    GOING_HOME = 1\n    LEAVING_HOME = 2\n    VISITING = 3\n    COMING_HOME = 4\n    NEITHER = 5\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.ResidentVisitorPurpose","title":"<code>ResidentVisitorPurpose</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for resident/visitor and flight purpose segmentation</p> Source code in <code>data_model/enums.py</code> <pre><code>class ResidentVisitorPurpose(IntEnum):\n    \"\"\"\n    Integer Mapping for resident/visitor and flight purpose segmentation\n    \"\"\"\n    RESIDENT_BUSINESS = 1\n    RESIDENT_NON_BUSINESS = 2\n    VISITOR_BUSINESS = 3\n    VISITOR_NON_BUSINESS = 4\n</code></pre>"},{"location":"api.html#data_model.enums.SPDropoffType","title":"<code>SPDropoffType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Represents the type of person who dropped off the respondent at the airport</p> Source code in <code>data_model/enums.py</code> <pre><code>class SPDropoffType(IntEnum):\n    \"\"\"\n    Represents the type of person who dropped off the respondent at the airport\n    \"\"\"\n    SPOUSE_PARTNER = 1\n    PARENT = 2\n    CHILD = 3\n    OTHER_RELATIVE = 4\n    FRIEND = 5\n    COLLEAGUE = 6\n    OTHER = 7\n</code></pre>"},{"location":"api.html#data_model.enums.SPImportance","title":"<code>SPImportance</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Importance levels for Stated Preference Responses</p> Source code in <code>data_model/enums.py</code> <pre><code>class SPImportance(IntEnum):\n    \"\"\"\n    Importance levels for Stated Preference Responses\n    \"\"\"\n    NOT_IMPORTANT = 1\n    SLIGHTLY_IMPORTANT = 2\n    IMPORTANT = 3\n    VERY_IMPORTANT = 4\n    EXTREMELY_IMPORTANT = 5\n</code></pre>"},{"location":"api.html#data_model.enums.SPLikelihood","title":"<code>SPLikelihood</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Likelihood levels for Stated Preference Responses</p> Source code in <code>data_model/enums.py</code> <pre><code>class SPLikelihood(IntEnum):\n    \"\"\"\n    Likelihood levels for Stated Preference Responses\n    \"\"\"\n    HIGHLY_UNLIKELY = 1\n    UNLIKELY = 2\n    NEUTRAL_DONT_KNOW = 3\n    LIKELY = 4\n    VERY_LIKELY = 5\n</code></pre>"},{"location":"api.html#data_model.enums.SPNumTransfers","title":"<code>SPNumTransfers</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Number of transfers levels for Stated Preference Responses</p> Source code in <code>data_model/enums.py</code> <pre><code>class SPNumTransfers(IntEnum):\n    \"\"\"\n    Number of transfers levels for Stated Preference Responses\n    \"\"\"\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE_OR_MORE = 3\n    NOT_WILLING_TO_TRANSFER = 4\n</code></pre>"},{"location":"api.html#data_model.enums.SPWillingToWalkTime","title":"<code>SPWillingToWalkTime</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Willingness to walk time levels for Stated Preference Responses</p> Source code in <code>data_model/enums.py</code> <pre><code>class SPWillingToWalkTime(IntEnum):\n    \"\"\"\n    Willingness to walk time levels for Stated Preference Responses\n    \"\"\"\n    LESS_THAN_TWO_MINS = 1\n    LESS_THAN_FIVE_MINS = 2\n    LESS_THAN_FIFTEEN_MINS = 3\n    LESS_THAN_THIRTY_MINS = 4\n    NOT_INTERESTED = 5\n</code></pre>"},{"location":"api.html#data_model.enums.SanBuildings","title":"<code>SanBuildings</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for SAN Airport buildings</p> Source code in <code>data_model/enums.py</code> <pre><code>class SanBuildings(IntEnum):\n    \"\"\"\n    Integer mapping for SAN Airport buildings\n\n    \"\"\"\n\n    TERMINAL_1 = 1 \n    TERMINAL_2 = 2 \n    SDCRAA_ADMIN_BLDG = 3\n    QHP_LIBERTY_STATION = 4 \n    SDCRAA_ADC_TRAILERS = 5 \n    AIRLINE_SUPPORT_BLDG_HARBOR_DRIVE = 6\n    AIR_CARGO_NORTH = 7\n    RENTAL_CAR_CENTER = 8\n    RECEIVING_DISTRIBUTION_CENTER = 9 \n    SIGNATURE_FLIGHT_SUPPORT = 10\n    FACILITIES_MAINTENANCE = 11\n    FBO = 12\n    MENZIES = 13\n    FAA = 14\n    OTHER_SPECIFY = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.SanFlightFrequency","title":"<code>SanFlightFrequency</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for flight frequency</p> Source code in <code>data_model/enums.py</code> <pre><code>class SanFlightFrequency(IntEnum):\n    \"\"\"\n    Integer mapping for flight frequency\n    \"\"\"\n    ONCE_OR_TWICE_PER_YEAR = 1\n    THREE_TO_FIVE_PER_YEAR = 2\n    SIX_TO_TEN_PER_YEAR = 3\n    ELEVEN_TO_TWENTY_PER_YEAR = 4\n    TWENTY_ONE_OR_MORE_PER_YEAR = 5\n    NEVER = 6\n    ALWAYS = 7 #only relevant for access mode use\n</code></pre>"},{"location":"api.html#data_model.enums.ShiftTime","title":"<code>ShiftTime</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>data_model/enums.py</code> <pre><code>class ShiftTime(Enum):\n    class TimeRange:\n        \"\"\" Make time ranges for categorization.\"\"\"\n\n        def __init__(self, lower_military_time, upper_military_time):\n            self.lower_military_time = lower_military_time\n            self.upper_military_time = upper_military_time\n\n        def __str__(self):\n            lower_clock_time = military_to_clock(self.lower_military_time)\n            upper_clock_time = military_to_clock(self.upper_military_time)\n            return f\"{lower_clock_time} - {upper_clock_time}\"\n\n    ZERO_TO_ZERO_THIRTY = TimeRange(\"0000\", \"0030\")\n    ZERO_THIRTY_TO_ZERO_ONE = TimeRange(\"0030\", \"0100\")\n    ZERO_ONE_TO_ZERO_ONE_THIRTY = TimeRange(\"0100\", \"0130\")\n    ZERO_ONE_THIRTY_TO_ZERO_TWO = TimeRange(\"0130\", \"0200\")\n    ZERO_TWO_TO_ZERO_TWO_THIRTY = TimeRange(\"0200\", \"0230\")\n    ZERO_TWO_THIRTY_TO_ZERO_THREE = TimeRange(\"0230\", \"0300\")\n    ZERO_THREE_TO_ZERO_THREE_THIRTY = TimeRange(\"0300\", \"0330\")\n    ZERO_THREE_THIRTY_TO_ZERO_FOUR = TimeRange(\"0330\", \"0400\")\n    ZERO_FOUR_TO_ZERO_FOUR_THIRTY = TimeRange(\"0400\", \"0430\")\n    ZERO_FOUR_THIRTY_TO_ZERO_FIVE = TimeRange(\"0430\", \"0500\")\n    ZERO_FIVE_TO_ZERO_FIVE_THIRTY = TimeRange(\"0500\", \"0530\")\n    ZERO_FIVE_THIRTY_TO_ZERO_SIX = TimeRange(\"0530\", \"0600\")\n    ZERO_SIX_TO_ZERO_SIX_THIRTY = TimeRange(\"0600\", \"0630\")\n    ZERO_SIX_THIRTY_TO_ZERO_SEVEN = TimeRange(\"0630\", \"0700\")\n    ZERO_SEVEN_TO_ZERO_SEVEN_THIRTY = TimeRange(\"0700\", \"0730\")\n    ZERO_SEVEN_THIRTY_TO_ZERO_EIGHT = TimeRange(\"0730\", \"0800\")\n    ZERO_EIGHT_TO_ZERO_EIGHT_THIRTY = TimeRange(\"0800\", \"0830\")\n    ZERO_EIGHT_THIRTY_TO_ZERO_NINE = TimeRange(\"0830\", \"0900\")\n    ZERO_NINE_TO_ZERO_NINE_THIRTY = TimeRange(\"0900\", \"0930\")\n    ZERO_NINE_THIRTY_TO_ZERO_TEN = TimeRange(\"0930\", \"1000\")\n    TEN_TO_TEN_THIRTY = TimeRange(\"1000\", \"1030\")\n    TEN_THIRTY_TO_ELEVEN = TimeRange(\"1030\", \"1100\")\n    ELEVEN_TO_ELEVEN_THIRTY = TimeRange(\"1100\", \"1130\")\n    ELEVEN_THIRTY_TO_NOON = TimeRange(\"1130\", \"1200\")\n    NOON_TO_TWELVE_THIRTY = TimeRange(\"1200\", \"1230\")\n    TWELVE_THIRTY_TO_THIRTEEN_HUNDRED = TimeRange(\"1230\", \"1300\")\n    THIRTEEN_HUNDRED_TO_THIRTEEN_THIRTY = TimeRange(\"1300\", \"1330\")\n    THIRTEEN_THIRTY_TO_FOURTEEN_HUNDRED = TimeRange(\"1330\", \"1400\")\n    FOURTEEN_HUNDRED_TO_FOURTEEN_THIRTY = TimeRange(\"1400\", \"1430\")\n    FOURTEEN_THIRTY_TO_FIFTEEN_HUNDRED = TimeRange(\"1430\", \"1500\")\n    FIFTEEN_HUNDRED_TO_FIFTEEN_THIRTY = TimeRange(\"1500\", \"1530\")\n    FIFTEEN_THIRTY_TO_SIXTEEN_HUNDRED = TimeRange(\"1530\", \"1600\")\n    SIXTEEN_HUNDRED_TO_SIXTEEN_THIRTY = TimeRange(\"1600\", \"1630\")\n    SIXTEEN_THIRTY_TO_SEVENTEEN_HUNDRED = TimeRange(\"1630\", \"1700\")\n    SEVENTEEN_HUNDRED_TO_SEVENTEEN_THIRTY = TimeRange(\"1700\", \"1730\")\n    SEVENTEEN_THIRTY_TO_EIGHTEEN_HUNDRED = TimeRange(\"1730\", \"1800\")\n    EIGHTEEN_HUNDRED_TO_EIGHTEEN_THIRTY = TimeRange(\"1800\", \"1830\")\n    EIGHTEEN_THIRTY_TO_NINETEEN_HUNDRED = TimeRange(\"1830\", \"1900\")\n    NINETEEN_HUNDRED_TO_NINETEEN_THIRTY = TimeRange(\"1900\", \"1930\")\n    NINETEEN_THIRTY_TO_TWENTY_HUNDRED = TimeRange(\"1930\", \"2000\")\n    TWENTY_HUNDRED_TO_TWENTY_THIRTY = TimeRange(\"2000\", \"2030\")\n    TWENTY_THIRTY_TO_TWENTY_ONE_HUNDRED = TimeRange(\"2030\", \"2100\")\n    TWENTY_ONE_HUNDRED_TO_TWENTY_ONE_THIRTY = TimeRange(\"2100\", \"2130\")\n    TWENTY_ONE_THIRTY_TO_TWENTY_TWO_HUNDRED = TimeRange(\"2130\", \"2200\")\n    TWENTY_TWO_HUNDRED_TO_TWENTY_TWO_THIRTY = TimeRange(\"2200\", \"2230\")\n    TWENTY_TWO_THIRTY_TO_TWENTY_THREE_HUNDRED = TimeRange(\"2230\", \"2300\")\n    TWENTY_THREE_HUNDRED_TO_TWENTY_THREE_THIRTY = TimeRange(\"2300\", \"2330\")\n    TWENTY_THREE_THIRTY_TO_MIDNIGHT = TimeRange(\"2330\", \"0000\")\n</code></pre>"},{"location":"api.html#data_model.enums.ShiftTime.TimeRange","title":"<code>TimeRange</code>","text":"<p>Make time ranges for categorization.</p> Source code in <code>data_model/enums.py</code> <pre><code>class TimeRange:\n    \"\"\" Make time ranges for categorization.\"\"\"\n\n    def __init__(self, lower_military_time, upper_military_time):\n        self.lower_military_time = lower_military_time\n        self.upper_military_time = upper_military_time\n\n    def __str__(self):\n        lower_clock_time = military_to_clock(self.lower_military_time)\n        upper_clock_time = military_to_clock(self.upper_military_time)\n        return f\"{lower_clock_time} - {upper_clock_time}\"\n</code></pre>"},{"location":"api.html#data_model.enums.State","title":"<code>State</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for all US and Mexico States</p> Source code in <code>data_model/enums.py</code> <pre><code>class State(IntEnum):\n    \"\"\"\n    Integer mapping for all US and Mexico States\n    \"\"\"\n    ALABAMA = 1\n    ALASKA = 2\n    AMERICAN_SAMOA = 3\n    ARIZONA = 4\n    ARKANSAS = 5\n    CALIFORNIA = 6\n    COLORADO = 7\n    CONNECTICUT = 8\n    DELAWARE = 9\n    DISTRICT_OF_COLUMBIA = 10\n    FLORIDA = 11\n    GEORGIA = 12\n    GUAM = 13\n    HAWAII = 14\n    IDAHO = 15\n    ILLINOIS = 16\n    INDIANA = 17\n    IOWA = 18\n    KANSAS = 19\n    KENTUCKY = 20\n    LOUISIANA = 21\n    MAINE = 22\n    MARYLAND = 23\n    MASSACHUSETTS = 24\n    MICHIGAN = 25\n    MINNESOTA = 26\n    MISSISSIPPI = 27\n    MISSOURI = 28\n    MONTANA = 29\n    NEBRASKA = 30\n    NEVADA = 31\n    NEW_HAMPSHIRE = 32\n    NEW_JERSEY = 33\n    NEW_MEXICO = 34\n    NEW_YORK = 35\n    NORTH_CAROLINA = 36\n    NORTH_DAKOTA = 37\n    NORTHERN_MARIANA_ISLANDS = 38\n    OHIO = 39\n    OKLAHOMA = 40\n    OREGON = 41\n    PENNSYLVANIA = 42\n    PUERTO_RICO = 43\n    RHODE_ISLAND = 44\n    SOUTH_CAROLINA = 45\n    SOUTH_DAKOTA = 46\n    TENNESSEE = 47\n    TEXAS = 48\n    UTAH = 49\n    VERMONT = 50\n    VIRGINIA = 51\n    VIRGIN_ISLANDS = 52\n    WASHINGTON = 53\n    WEST_VIRGINIA = 54\n    WISCONSIN = 55\n    WYOMING = 56\n    AGUASCALIENTES = 57\n    BAJA_CALIFORNIA = 58\n    BAJA_CALIFORNIA_SUR = 59\n    CAMPECHE = 60\n    CHIAPAS = 61\n    CHIHUAHUA = 62\n    COAHUILA = 63\n    COLIMA = 64\n    CIUDAD_DE_MEXICO = 65\n    DURANGO = 66\n    GUANAJUATO = 67\n    GUERRERO = 68\n    HIDALGO = 69\n    JALISCO = 70\n    MEXICO_STATE = 71\n    MICHOACAN = 72\n    MORELOS = 73\n    NAYARIT = 74\n    NUEVO_LEON = 75\n    OAXACA = 76\n    PUEBLA = 77\n    QUERETARO = 78\n    QUINTANA_ROO = 79\n    SAN_LUIS_POTOSI = 80\n    SINALOA = 81\n    SONORA = 82\n    TABASCO = 83\n    TAMAULIPAS = 84\n    TLAXCALA = 85\n    VERACRUZ = 86\n    YUCATAN = 87\n    ZACATECAS = 88\n    NOT_US_OR_MEXICO_RESIDENT = 99\n</code></pre>"},{"location":"api.html#data_model.enums.SurveyLanguage","title":"<code>SurveyLanguage</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Mapping for Survey Language</p> Source code in <code>data_model/enums.py</code> <pre><code>class SurveyLanguage(Enum):\n    \"\"\"\n    Mapping for Survey Language\n    \"\"\"\n    ENGLISH = \"ENGLISH\"\n    SPANISH = \"SPANI\"\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.Terminal","title":"<code>Terminal</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for terminals</p> Source code in <code>data_model/enums.py</code> <pre><code>class Terminal(IntEnum):\n    \"\"\"\n    Integer mapping for terminals\n\n    \"\"\"\n    TERMINAL_1 = 1\n    TERMINAL_2 = 2\n    UNKNOWN = 99\n</code></pre>"},{"location":"api.html#data_model.enums.TransitUseFrequency","title":"<code>TransitUseFrequency</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for weekly transit use frequency</p> Source code in <code>data_model/enums.py</code> <pre><code>class TransitUseFrequency(IntEnum):\n    \"\"\"\n    Integer mapping for weekly transit use frequency\n    \"\"\"\n    NONE = 0\n    ONE_DAY = 1\n    TWO_DAYS = 2\n    THREE_DAYS = 3\n    FOUR_DAYS = 4\n    FIVE_DAYS = 5\n    SIX_DAYS = 6\n    SEVEN_DAYS = 7\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#data_model.enums.TravelDuration","title":"<code>TravelDuration</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer Mapping for travel duration (nights away or nights visited)</p> Source code in <code>data_model/enums.py</code> <pre><code>class TravelDuration(IntEnum):\n    \"\"\"\n    Integer Mapping for travel duration (nights away or nights visited)\n    \"\"\"\n    NONE = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT_TO_TEN = 8\n    ELEVEN_TO_FOURTEEN = 9\n    MORE_THAN_FOURTEEN = 10\n</code></pre>"},{"location":"api.html#data_model.enums.TravelMode","title":"<code>TravelMode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Mapping for all the modes used in the survey</p> Source code in <code>data_model/enums.py</code> <pre><code>class TravelMode(IntEnum):\n    \"\"\"\n    Mapping for all the modes used in the survey\n    \"\"\"\n    WALK = 1\n    WHEELCHAIR_OR_MOBILITY_DEVICE = 2\n    BICYCLE_ELECTRIC_BIKESHARE = 3\n    BICYCLE_NON_ELECTRIC_BIKESHARE = 4\n    E_SCOOTER_SHARED = 5\n    BICYCLE_PERSONAL_ELECTRIC = 6\n    BICYCLE_PERSONAL_NON_ELECTRIC = 7\n    E_SCOOTER_PERSONAL = 8\n    TAXI = 9\n    UBER_LYFT = 10\n    CAR_SERVICE_BLACK_LIMO = 11\n    DROPPED_OFF_BY_FAMILY_FRIEND = 12\n    DROVE_ALONE_AND_PARKED = 13\n    DROVE_WITH_OTHERS_AND_PARKED = 14\n    MTS_ROUTE_992 = 15\n    AIRPORT_FLYER_SHUTTLE = 16\n    CHARTERED_TOUR_BUS = 17\n    EMPLOYEE_SHUTTLE = 18\n    RENTAL_CAR_DROPPED_OFF = 19\n    RENTAL_CAR_PARKED = 20\n    HOTEL_SHUTTLE_VAN = 21\n    OTHER_SHARED_VAN = 22\n    PICKED_UP_BY_FAMILY_FRIEND = 23\n    GET_IN_PARKED_VEHICLE_AND_DRIVE_ALONE = 24\n    GET_IN_PARKED_VEHICLE_AND_DRIVE_WITH_OTHERS = 25\n    GET_IN_PARKED_VEHICLE_AND_RIDE_WITH_OTHER_TRAVELERS = 26\n    RENTAL_CAR_PICKED_UP = 27\n    RENTAL_CAR_GET_IN_PARKED = 28\n    RODE_WITH_OTHER_TRAVELERS_AND_PARKED = 29\n    OTHER_PUBLIC_TRANSIT = 30\n    OTHER = 98\n    REFUSED_NO_ANSWER = 99\n</code></pre>"},{"location":"api.html#data_model.enums.TravelModeGrouped","title":"<code>TravelModeGrouped</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for consolidated modes</p> Source code in <code>data_model/enums.py</code> <pre><code>class TravelModeGrouped(IntEnum):\n    \"\"\"\n    Integer mapping for consolidated modes\n    \"\"\"\n    WALK = 1\n    WHEELCHAIR_OR_OTHER_MOBILITY_DEVICE = 2\n    MICROMOBILITY_SHARED = 3\n    MICROMOBILITY_PERSONAL = 4\n    RIDEHAIL_TAXI = 5\n    PUBLIC_TRANSPORTATION = 6\n    PERSONAL_CAR_DROPPED_OFF_PICKED_UP = 7\n    PERSONAL_CAR_PARKED = 8\n    SHARED_SHUTTLE_VAN = 9\n    BUS_992 = 10\n    AIRPORT_FLYER_SHUTTLE = 11\n    RENTAL_CAR = 12\n    OTHER = 98\n    REFUSED_NO_ANSWER = 99\n</code></pre>"},{"location":"api.html#data_model.enums.Type","title":"<code>Type</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Integer mapping for market segmentation</p> Source code in <code>data_model/enums.py</code> <pre><code>class Type(IntEnum):\n    \"\"\"\n    Integer mapping for market segmentation\n    \"\"\"\n\n    PASSENGER = 1\n    EMPLOYEE = 2\n    NEITHER = 3\n    OTHER = 98\n    UNKNOWN = 99\n</code></pre>"},{"location":"api.html#data_model.enums.YesNoType","title":"<code>YesNoType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for Yes or No Type Questions</p> Source code in <code>data_model/enums.py</code> <pre><code>class YesNoType(IntEnum):\n    \"\"\"\n    Enum for Yes or No Type Questions\n    \"\"\"\n    YES = 1\n    NO = 2\n    OTHER = 98\n    REFUSED = 99\n</code></pre>"},{"location":"api.html#utils","title":"Utils","text":"<p>This section includes the Utility methods</p> <p>Utility functions used with the data model.</p>"},{"location":"api.html#data_model.utils.add_enum_label_columns","title":"<code>add_enum_label_columns(df, model)</code>","text":"<p>After the datamodel output is converted into a dataframe, this method adds a column to the output dataframe for each Enum variable in the datamodel. This column  shows the Enum label.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The DataFrame to which the Enum label columns will be added.</p> required <code>model</code> <code>BaseModel</code> <p>A Pydantic model with fields annotated with types, potentially including Enums.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The modified DataFrame with additional Enum label columns.</p> Source code in <code>data_model/utils.py</code> <pre><code>def add_enum_label_columns(df,model) -&gt; pd.DataFrame:\n    \"\"\"\n    After the datamodel output is converted into a dataframe, this method adds a column to the output dataframe for each Enum variable in the datamodel. This column \n    shows the Enum label.\n\n    Args:\n        df (pd.DataFrame): The DataFrame to which the Enum label columns will be added.\n        model (BaseModel): A Pydantic model with fields annotated with types, potentially including Enums.\n\n    Returns:\n        pd.DataFrame: The modified DataFrame with additional Enum label columns.\n    \"\"\"\n\n    for field, field_type in model.__annotations__.items():\n        base_type = extract_base_type(field_type)\n        if issubclass(base_type,(Enum,IntEnum)):\n            enum_names = {item.value: item.name for item in base_type}\n            enum_name_col = f\"{field}_label\" \n            df[enum_name_col] = df[field].map(enum_names).astype(str)\n    return df\n</code></pre>"},{"location":"api.html#data_model.utils.add_list_objects","title":"<code>add_list_objects(child_list, child_key, parent_list, parent_key, parent_variable)</code>","text":"<p>Maps a list of child objects to a list of parent objects. The child objects are added to the parent objects as a list using the <code>parent_variable</code> as the key. The <code>child_key</code> is used to match the child to the parent using the <code>parent_key</code>.</p> Source code in <code>data_model/utils.py</code> <pre><code>def add_list_objects(\n    child_list: list,\n    child_key: str,\n    parent_list: list,\n    parent_key: str,\n    parent_variable: str,\n) -&gt; list:\n    \"\"\"\n    Maps a list of child objects to a list of parent objects. The child objects\n    are added to the parent objects as a list using the `parent_variable` as the\n    key. The `child_key` is used to match the child to the parent using the\n    `parent_key`.\n    \"\"\"\n    parent_to_child_map = defaultdict(dict)\n    for child in child_list:\n        temp_key = child[child_key]\n        del child[child_key]\n        parent_to_child_map[temp_key] = child\n\n    for parent in parent_list:\n        temp_key = parent[parent_key]\n        parent[parent_variable] = parent_to_child_map.get(temp_key, {})\n\n    return parent_list\n</code></pre>"},{"location":"api.html#data_model.utils.add_synthetic_records","title":"<code>add_synthetic_records(df)</code>","text":"<p>Adds synthetic responses to the survey DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The original DataFrame containing survey responses.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame with synthetic responses added.</p> Source code in <code>data_model/utils.py</code> <pre><code>def add_synthetic_records(df) -&gt; pd.DataFrame:\n    \"\"\"\n    Adds synthetic responses to the survey DataFrame.\n\n    Args:\n        df (pd.DataFrame): The original DataFrame containing survey responses.\n\n    Returns:\n        pd.DataFrame: A DataFrame with synthetic responses added.\n    \"\"\"\n     # Create a list to store synthetic records\n    synthetic_records = []\n    # Iterate through each record in the dataframe\n    for index, row in df.iterrows():\n        # Create a copy of the current row for the synthetic record\n        if row['passenger_type'] == e.PassengerType.DEPARTING and row['initial_etc_check'] == True:\n            synthetic_record = row.copy()\n\n            # Flip inbound/outbound\n            synthetic_record['respondentid'] = 'syn-' + str(row['respondentid'])\n            synthetic_record['inbound_or_outbound'] = 2 if row['inbound_or_outbound'] == 1 else 1\n            synthetic_record['passenger_type'] = e.PassengerType.ARRIVING\n            synthetic_record['car_available'] = pd.NA\n            #to-do add resident_visitor_general:\n            if row['resident_visitor_general'] == e.ResidentVisitorGeneral.GOING_HOME:\n                synthetic_record['resident_visitor_general'] = e.ResidentVisitorGeneral.VISITING\n            elif row['resident_visitor_general'] == e.ResidentVisitorGeneral.LEAVING_HOME:\n                synthetic_record['resident_visitor_general'] = e.ResidentVisitorGeneral.COMING_HOME\n\n            if row['passenger_segment'] == e.PassengerSegment.RESIDENT_DEPARTING:\n                synthetic_record['passenger_segment'] = e.PassengerSegment.RESIDENT_ARRIVING\n            elif row['passenger_segment'] == e.PassengerSegment.VISITOR_DEPARTING:\n                synthetic_record['passenger_segment'] = e.PassengerSegment.VISITOR_ARRIVING\n\n            synthetic_record['previous_flight_origin'], synthetic_record['next_flight_destination'] = row['next_flight_destination'], row['previous_flight_origin']\n\n            # Flipping the main and reverse modes:\n            if pd.notna(row['reverse_mode']) and row['reverse_mode']!=e.TravelMode.REFUSED_NO_ANSWER:\n                synthetic_record['main_mode'], synthetic_record['reverse_mode'] = row['reverse_mode'], row['main_mode']\n            elif pd.notna(row['reverse_mode_predicted']) and row['reverse_mode_predicted']!=e.TravelMode.REFUSED_NO_ANSWER:\n                synthetic_record['main_mode'], synthetic_record['reverse_mode_predicted'] = row['reverse_mode_predicted'], row['main_mode']\n\n\n            synthetic_record['reverse_mode_combined'] = row['main_mode_grouped']\n            #Similar for grouped modes\n            if pd.notna(row['reverse_mode_grouped']) and row['reverse_mode_grouped']!=e.TravelModeGrouped.REFUSED_NO_ANSWER:\n                synthetic_record['main_mode_grouped'], synthetic_record['reverse_mode_grouped'] = row['reverse_mode_grouped'], row['main_mode_grouped']\n            elif pd.notna(row['reverse_mode_predicted_grouped']) and row['reverse_mode_predicted_grouped']!=e.TravelModeGrouped.REFUSED_NO_ANSWER:\n                synthetic_record['main_mode_grouped'], synthetic_record['reverse_mode_predicted_grouped'] = row['reverse_mode_predicted_grouped'], row['main_mode_grouped']\n\n            #synthetic_record['main_mode_grouped'], synthetic_record['reverse_mode_combined'] = row['reverse_mode_combined'], row['main_mode_grouped']\n            # print(row['main_mode_grouped'], row['reverse_mode_combined'])\n\n\n            # Access and Egress Modes:\n            # synthetic_record['access_mode'], synthetic_record['egress_mode'] = row['egress_mode'], row['access_mode']\n            # synthetic_record['access_mode_grouped'], synthetic_record['egress_mode_grouped'] = row['egress_mode_grouped'], row['access_mode_grouped']\n            # Set access and egress modes to None\n            synthetic_record[\"access_mode\"] = None\n            synthetic_record[\"egress_mode\"] = None\n            synthetic_record[\"access_mode_grouped\"] = None\n            synthetic_record[\"egress_mode_grouped\"] = None\n\n            # Activity Type\n            synthetic_record['origin_activity_type'], synthetic_record['destination_activity_type'] = row['destination_activity_type'], row['origin_activity_type']\n            synthetic_record['origin_activity_type_other'], synthetic_record['destination_activity_type_other'] = row['destination_activity_type_other'], row['origin_activity_type_other']\n\n           #Location Attributes\n            synthetic_record['origin_state'], synthetic_record['destination_state'] = row['destination_state'], row['origin_state']\n            synthetic_record['origin_city'], synthetic_record['destination_city'] = row['destination_city'], row['origin_city']\n            synthetic_record['origin_zip'], synthetic_record['destination_zip'] = row['destination_zip'], row['origin_zip']\n\n            synthetic_record['origin_latitude'], synthetic_record['destination_latitude'] = row['destination_latitude'], row['origin_latitude']\n            synthetic_record['origin_longitude'], synthetic_record['destination_longitude'] = row['destination_longitude'], row['origin_longitude']\n            synthetic_record['origin_municipal_zone'], synthetic_record['destination_municipal_zone'] = row['destination_municipal_zone'], row['origin_municipal_zone']\n            synthetic_record['origin_pmsa'], synthetic_record['destination_pmsa'] = row['destination_pmsa'], row['origin_pmsa']\n\n\n            #synthetic_record['to_airport_transit_route_1'], synthetic_record['from_airport_transit_route_4'] = row['from_airport_transit_route_4'], row['to_airport_transit_route_1']\n            #synthetic_record['to_airport_transit_route_2'], synthetic_record['from_airport_transit_route_3'] = row['from_airport_transit_route_3'], row['to_airport_transit_route_2']\n            #synthetic_record['to_airport_transit_route_3'], synthetic_record['from_airport_transit_route_2'] = row['from_airport_transit_route_2'], row['to_airport_transit_route_3']\n            #synthetic_record['to_airport_transit_route_4'], synthetic_record['from_airport_transit_route_1'] = row['from_airport_transit_route_1'], row['to_airport_transit_route_4']\n\n\n            # Append the synthetic record to the list\n            synthetic_record['record_type_synthetic'] = 1\n            synthetic_records.append(synthetic_record)\n\n    # Convert the list of synthetic records to a DataFrame\n    synthetic_df = pd.DataFrame(synthetic_records)\n\n    # Concatenate the original and synthetic dataframes\n    combined_df = pd.concat([df, synthetic_df], ignore_index=True)\n\n    return combined_df\n</code></pre>"},{"location":"api.html#data_model.utils.extract_base_type","title":"<code>extract_base_type(typ)</code>","text":"<p>Extracts base type from complex annotations. This is needed to identify whether a variable  is an Enum. Without this step, the origin of all the variables in the model is Annotated, even the variable is an Enum</p> Source code in <code>data_model/utils.py</code> <pre><code>def extract_base_type(typ):\n    \"\"\"\n    Extracts base type from complex annotations. This is needed to identify whether a variable \n    is an Enum. Without this step, the origin of all the variables in the model is Annotated, even the variable is an Enum\n    \"\"\"\n    origin = get_origin(typ)\n    if origin is not Enum:      \n        base = get_args(typ)\n        if base:\n           base = extract_base_type(base[0])\n           return base\n    return typ\n</code></pre>"},{"location":"api.html#data_model.utils.map_zones","title":"<code>map_zones(df, lat_col, long_col, shapefile, zone_column, external_zone_value)</code>","text":"<p>Maps coordinates in a DataFrame to zones defined in a shapefile.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Input DataFrame with latitude and longitude columns.</p> required <code>lat_col</code> <code>str</code> <p>Column name for latitude in the DataFrame.</p> required <code>long_col</code> <code>str</code> <p>Column name for longitude in the DataFrame.</p> required <code>shapefile</code> <code>str</code> <p>Path to the shapefile containing zone geometries.</p> required <code>zone_column</code> <code>str</code> <p>Column name in the shapefile that contains zone names.</p> required <code>external_zone_value</code> <code>Any</code> <p>Value to return if a point is not within any zone in the shapefile.</p> required <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>pd.GeoDataFrame: A GeoDataFrame with zone names mapped to each row.</p> Source code in <code>data_model/utils.py</code> <pre><code>def map_zones(\n    df: pd.DataFrame, \n    lat_col: str, \n    long_col: str, \n    shapefile: str, \n    zone_column: str, \n    external_zone_value: Any\n) -&gt; gpd.GeoDataFrame:\n    \"\"\"\n    Maps coordinates in a DataFrame to zones defined in a shapefile.\n\n    Args:\n        df (pd.DataFrame): Input DataFrame with latitude and longitude columns.\n        lat_col (str): Column name for latitude in the DataFrame.\n        long_col (str): Column name for longitude in the DataFrame.\n        shapefile (str): Path to the shapefile containing zone geometries.\n        zone_column (str): Column name in the shapefile that contains zone names.\n        external_zone_value (Any): Value to return if a point is not within any zone\n            in the shapefile.\n\n    Returns:\n        pd.GeoDataFrame: A GeoDataFrame with zone names mapped to each row.\n    \"\"\"\n    # Load the shapefile into a GeoDataFrame\n    zones_gdf: gpd.GeoDataFrame = gpd.read_file(shapefile)\n\n    # Ensure the shapefile has a consistent CRS (WGS84)\n    zones_gdf = zones_gdf.to_crs(epsg=4326)\n    data: pd.DataFrame = df.copy()\n    # Add a geometry column to the DataFrame for spatial joining\n    data[\"geometry\"] = data.apply(\n        lambda row: Point(row[long_col], row[lat_col]) \n        if pd.notnull(row[long_col]) and pd.notnull(row[lat_col]) else None, \n        axis=1\n    )\n\n    # Convert the DataFrame to a GeoDataFrame\n    data_gdf: gpd.GeoDataFrame = gpd.GeoDataFrame(data, geometry=\"geometry\", crs=\"EPSG:4326\")\n\n    # Perform a spatial join to map points to zones\n    mapped_gdf: gpd.GeoDataFrame = gpd.sjoin(data_gdf, zones_gdf, how=\"left\", predicate=\"within\")\n\n    # Check if the zone_column is of integer type\n    is_zone_int: bool = pd.api.types.is_integer_dtype(zones_gdf[zone_column])\n\n    # Map zone names, handling cases where coordinates are missing or no match is found\n    def get_zone(row):\n        if pd.isnull(row[lat_col]) or pd.isnull(row[long_col]):\n            return None  # Blank if coordinates are missing\n        elif pd.isnull(row[zone_column]):\n            return external_zone_value # 99 for int zone_column, EXTERNAL for others\n        else:\n            return row[zone_column]  # Return the matched zone name\n\n    # Apply the function to determine the zone for each row\n    return mapped_gdf.apply(get_zone, axis=1)\n</code></pre>"},{"location":"api.html#data_model.utils.military_to_clock","title":"<code>military_to_clock(military_time)</code>","text":"<p>Converts a military time string (HHMM) to a 12-hour clock format string (hh:mm AM/PM).</p> <p>Parameters:</p> Name Type Description Default <code>military_time</code> <code>str</code> <p>A string representing time in 24-hour format (e.g., \u201c0600\u201d).</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representing time in 12-hour clock format (e.g., \u201c6:00 AM\u201d).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input string is not in the correct format (HHMM).</p> Source code in <code>data_model/utils.py</code> <pre><code>def military_to_clock(military_time: str) -&gt; str:\n    \"\"\"Converts a military time string (HHMM) to a 12-hour clock format string (hh:mm AM/PM).\n\n    Args:\n        military_time (str): A string representing time in 24-hour format (e.g., \"0600\").\n\n    Returns:\n        str: A string representing time in 12-hour clock format (e.g., \"6:00 AM\").\n\n    Raises:\n        ValueError: If the input string is not in the correct format (HHMM).\n    \"\"\"\n\n    if not military_time.isdigit() or len(military_time) != 4:\n        raise ValueError(\n            \"Invalid military time format. Please use HHMM format (e.g., 0600).\"\n        )\n\n    hours = int(military_time[:2])\n    minutes = int(military_time[2:])\n\n    # Convert to 12-hour format\n    if hours == 0:\n        clock_hours = 12\n        period = \"am\"\n    elif hours &gt;= 12:\n        clock_hours = hours - 12\n        period = \"pm\"\n    else:\n        clock_hours = hours\n        period = \"am\"\n\n    # Format the output string\n    return f\"{clock_hours:02d}:{minutes:02d} {period}\"\n</code></pre>"},{"location":"api.html#data_model.utils.nan_to_none","title":"<code>nan_to_none(cls, value)</code>","text":"<p>Convert nan to none to address that missing strings were being read as nan, which resulted in a value error when using using Optional[str]</p> Source code in <code>data_model/utils.py</code> <pre><code>def nan_to_none(cls, value: Any):\n    \"\"\"\n    Convert nan to none to address that missing strings were being read as nan, which resulted in a value error when using using Optional[str]\n    \"\"\"\n    if value != value:\n        return None\n    return value\n</code></pre>"}]}